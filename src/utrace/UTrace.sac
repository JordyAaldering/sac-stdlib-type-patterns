module UTrace;

use StdIO: all;
use Structures: all;
use ArrayFormat: all;
use Indent: all;

export all except { PrintSeparator, PrintHeader, Indent };

objdef Indent offset = newIndent( 0);

void PrintSeparator( string pattern)
{
  doIndent( pattern);
  printf( "----------------------------------------------\n");
}

void PrintHeader( string modName, int line)
{
  doIndent( "   ");
  printf( "%-15s: line %3d: ", modName, line);
  setIndent( offset, 27); // 15 + 2 + 5 + 3 + 2
}

void PrintFunEnter( string modName, int line, string funName)
{
  incIndent();
  PrintSeparator( ">  ");
  PrintHeader( modName, line);
  printf( "%s (\n", funName);
  incIndent( offset, strlen( funName) + 3);
}

void PrintFunLeave( string modName, int line, string funName)
{
  PrintSeparator( "<  ");
  decIndent();
  decIndent( offset, strlen( funName) + 2);
}

void PrintArgsDone( string modName, int line, string funName)
{
  doIndent( "   ");
  doIndent( offset, " ");
  printf( ");\n");
}


#define BUILT_IN( fun)                                                         \
fun( int)                                                                      \
fun( float)                                                                    \
fun( double)                                                                   \
fun( bool)                                                                     \
fun( char)

#define SHOW_A( typ)                                                           \
void indentedShow( typ[d:shp] arr)                                             \
{                                                                              \
  cshape = to_string( format( shp));                                           \
  printf( "reshape( [ %s ] , [\n", cshape);                                    \
                                                                               \
  carr = format( arr);                                                         \
  len = getIndent() + getIndent( offset) + strlen( cshape) + 18;               \
  spaces = genarray( [len], ' ');                                              \
  default = spaces ++ genarray( take( [-1], shape( carr)), ' ');               \
  ext_carr = with {                                                            \
               ( . <= iv <= .) : spaces ++ carr[ iv];                          \
             } : genarray( drop( [-1], shape( carr)), default);                \
                                                                               \
  show( ext_carr);                                                             \
  incIndent( offset, strlen( cshape) + 16);                                    \
  doIndent( "   ");                                                            \
  doIndent( offset, " ");                                                      \
  printf( "])\n");                                                             \
  decIndent( offset, strlen( cshape) + 16);                                    \
}

#define SHOW_VV( typ)                                                          \
void indentedShow( typ[.,.] arr)                                               \
{                                                                              \
  spaces = genarray( [getIndent() + getIndent( offset)], ' ');                 \
  carr = format( arr);                                                         \
  res = { [i] -> i == 0 ? carr[i] ++ spaces : spaces ++ carr[i] };             \
  show( res);                                                                  \
}

#define SHOW_V( typ)                                                           \
void indentedShow( typ[.] arr)                                                 \
{                                                                              \
  show( arr);                                                                  \
}

#define SHOW_S( typ)                                                           \
void indentedShow( typ arr)                                                    \
{                                                                              \
  show( arr);                                                                  \
}

#define SHOW( typ)                                                             \
SHOW_A( typ)                                                                   \
SHOW_VV( typ)                                                                  \
SHOW_V( typ)                                                                   \
SHOW_S( typ)

BUILT_IN( SHOW)


#define PRINT_ARG( typ)                                                        \
void PrintArg( string modName, int line, string var, typ[*] x)                 \
{                                                                              \
  doIndent( "   ");                                                            \
  doIndent( offset, " ");                                                      \
  printf( " %s = ", var);                                                      \
  incIndent( offset, strlen( var) + 4);                                        \
  indentedShow( x);                                                            \
  decIndent( offset, strlen( var) + 4);                                        \
}

BUILT_IN( PRINT_ARG)


#define PRINT_ASSIGN( typ)                                                     \
void PrintAssign( string modName, int line, string var, typ[*] x)              \
{                                                                              \
  PrintHeader( modName, line);                                                 \
  printf( "%s = ", var);                                                       \
  incIndent( offset, strlen( var) + 3);                                        \
  indentedShow( x);                                                            \
  decIndent( offset, strlen( var) + 3);                                        \
}

BUILT_IN( PRINT_ASSIGN)


#define PRINT_RETURN( typ)                                                     \
void PrintReturn( string modName, int line, typ[*] x)                          \
{                                                                              \
  PrintHeader( modName, line);                                                 \
  printf( "returning ");                                                       \
  incIndent( offset, 10);                                                      \
  indentedShow( x);                                                            \
  decIndent( offset, 10);                                                      \
}

BUILT_IN( PRINT_RETURN)
