module Quaternion;

#define OVERLOADS tod,dim,shape,sel,+,-,*
use Array: all except {OVERLOADS};
import Array: {OVERLOADS};

export all;

typedef double[4] quaternion;

// type conversions

inline
quaternion[*] toq( double[+] q)
{
  res = (quaternion[*])q;
  return( res);
}

inline
quaternion[*] toq( int[+] q)
{
  res = (quaternion[*])tod( q);
  return( res);
}

inline
double[+] tod( quaternion[*] q)
{
  res = (double[+])q;
  // the next line ensures type conformity to be checked....
  // this is ugly :-( but works :-)
  res = reshape( modarray( shape( res), dim( res) - 1, 4), res);
  return( res);
}

// Array properties

inline
int dim( quaternion[*] q)
{
  res = dim( (double[+])q) - 1;
  return( res);
}

inline
int[.] shape( quaternion[*] q)
{
  res = drop( [-1], shape( (double[+])q));
  return( res);
}

// Array selection

inline
quaternion[*] sel( int[.] idx, quaternion[*] a)
{
  v = ((double[+])a)[idx];
  res = (quaternion[*])v;
  return( res);
}

// Scalar functions

inline
quaternion[*] +( double a, quaternion[*] b)
{
  v = a + (double[+])b;
  res = (quaternion[*])v;
  return( res);
}

inline
quaternion[*] +( quaternion[*] a, double b)
{
  v = (double[+])a + b;
  res = (quaternion[*])v;
  return( res);
}

inline
quaternion[*] +( quaternion[*] a, quaternion[*] b)
{
  v = (double[+])a + (double[+])b;
  res = (quaternion[*])v;
  return( res);
}

inline
quaternion[d:shp] *( quaternion a, quaternion[d:shp] b)
{
  res = with {
          (_mul_SxV_( 0, shp) <= iv < shp)
            : a * b[iv];
        } : genarray( shp, toq( [0d,0d,0d,0d]));
  return( res);
}

inline
quaternion[d:shp] *( quaternion[d:shp] a, quaternion b)
{
  res = with {
          (_mul_SxV_( 0, shp) <= iv < shp)
            : a[iv] * b;
        } : genarray( shp, toq( [0d,0d,0d,0d]));
  return( res);
}

inline
quaternion[d:shp] *( quaternion[d:shp] a, quaternion[d:shp] b)
{
  res = with {
          (_mul_SxV_( 0, shp) <= iv < shp)
            : a[iv] * b[iv];
        } : genarray( shp, toq( [0d,0d,0d,0d]));
  return( res);
}

inline
quaternion *( quaternion a, quaternion b)
{
  ad = (double[4])a;
  bd = (double[4])b;
  res = (quaternion)[ ad[0]*bd[0] - ad[1]*bd[1] - ad[2]*bd[2] - ad[3]*bd[3],
                      ad[0]*bd[1] + ad[1]*bd[0] + ad[2]*bd[3] - ad[3]*bd[2],
                      ad[0]*bd[2] - ad[1]*bd[3] + ad[2]*bd[0] + ad[3]*bd[1],
                      ad[0]*bd[3] + ad[1]*bd[2] - ad[2]*bd[1] + ad[3]*bd[0] ];
  return( res);
}
