module ArrayFormat;

use Array: all;
use MathArray: {log10};
use String: {tochar, sprintf};

export {format};

#include "Templates.mac"

/******************************************************************************
 *
 * APL Array formatting functions
 *  These functions generate character representations of SAC arrays for
 *  APL-based code.
 *  The functions come in several classes:
 *  	Default formatting: Array elements are formatted to the minimum width
 * 	that does not lose precision.
 *      Defined formatting to specified precision, p: Array elements are
 *      formatted to p significant digits.
 *  	Defined formatting: Array elements are formatted to specified
 *	precision and width. If a result element does not fit within width,
 *	that element is replaced by '*'.
 *
 ******************************************************************************/

/******************************************************************************
 *
 * Utility function for formatting an int vector to widths wid
 *
 ******************************************************************************/

inline
char[.] formatrow( int[vlen] wid, int[vlen] m)
{
  z = genarray( [(sum( wid + 1) - 1)], ' ');
  // Can't use WL because widths may differ
  sink = 0;
  for( i = 0; i < vlen; i++) {
    curm = sel( [i], m);
    curw = sel( [i], wid);
    curz = format( curm, [curw, 1]);
    lim  = sel( [0], shape (curz));

    for( src = 0; src < lim; src++) {
      z = modarray( z, src + sink, sel( [src], curz));
    }

    // Inter-element blank
    sink++;
    sink = sink + sel( [i], wid);
  }
  return( z);
}

/******************************************************************************
 *
 * Poor man's 10-logarithm, used to compute column widths
 *
 ******************************************************************************/

int[dim:shp] pmtl( int[dim:shp] y)
{
  // Avoid 10 log 0!
  z = 1 + toi( log10( max(2.0, tod( y))));
  return( z);
}

/******************************************************************************
 *
 * First-axis max-reduce rank-2 matrix
 *
 ******************************************************************************/

inline
int[n] maxsl1(int[n,m] y)
{
  z = with {
        ([0] <= iv < [n]) : sel( iv, y); 
      } : fold( max, minint ());
  return( z);
}

/******************************************************************************
 *
 * First-axis min-reduce rank-2 matrix
 *
 ******************************************************************************/

inline
int[n] minsl1(int[n,m] y)
{
  z = with {
        ([0] <= iv < [n]) : sel( iv, y); 
      } : fold( min, maxint ());
  return(z);
}

/******************************************************************************
 *
 * SAC does not have overtake, so this does the job
 *
 ******************************************************************************/

inline
char[.] PadWithBlanks( int[1] wid, char[.] el)
{
  z = take( wid, el ++ genarray( wid, ' '));
  return( z);
}

/******************************************************************************
 *
 * Align one row of a floating-point matrix
 *
 ******************************************************************************/

char[.] alignrow(char[.,.] fry, int[1] iv, int[cols] widths, int[.] lodp,
                 int[.] lodpmax, int zcols)
{
  z = genarray( [zcols], ' ');
  zci = 0;
  for( ci = 0; ci < cols; ci++) {
    fi = ci + cols * iv[0];           // Source item index
    sc = lodp[[fi]] - lodpmax[[ci]];  // Shift count to align decimal
    sefe = thcharsto( [' ',' '], fry[[fi]]);
    sz = sefe + abs( sc);
    zit = PadWithBlanks( [sz], rotate( [-sc], fry[[fi]]));
    z, junk = thrnAppend(z, zci, zit);
    zci = zci + widths[ci] + 1;
  }
  return(z);
}

/******************************************************************************
 *
 * Find chars left of decimal point (or end)
 *
 *   I.e., (fry member ch) iota 1
 *
 ******************************************************************************/

inline
int thcharsto(char[n] ch, char[lim] fry) | n > 1
{
  z = lim;
  for( i = 0; i < lim; i++) {
    if ((fry[[i]] == ch[[0]]) || (fry[[i]] == ch[[1]])) {
      z = i;
      i = lim;
    }
  }
  return( z);
}

/******************************************************************************
 *
 * Primitive double scalar formatter, because sprintf gives wrong answers.
 *
 *   FIXME - write proper formatter, using Steele/Burger formatting
 *
 ******************************************************************************/

char[.] ScalarFormatter(double y, int precision)
{
  z = String::tochar( String::sprintf( "%.*g", precision, y));
  z = KillPlusSign( z);
  return( z);
}

/******************************************************************************
 *
 * Primitive double scalar formatter, because sprintf is useless
 *
 *   FIXME - write proper formatter, using Steele/Burger formatting
 *
 ******************************************************************************/

inline
char[.], int ScalarFormatterPad(double y, int precision)
{
 z = ScalarFormatter( y, precision);
 shpz = shape(z)[0];

#ifdef DEBUGME
  // We expect worst-case format to be:   "-1.234e-308 "
  // This leads to 7 in next line:         | |   ||||||
  if ((precision + 7) < shpz) {
    show( tochar( "ScalarFormatter expected shorter result"));
    show( shpz);
    print( precision + 7);
  }
#endif

  // Avoid strange bugs in calls from WLs
  z = PadWithBlanks( [precision + 7], z);
  return( z, shpz);
}

/******************************************************************************
 *
 * Kill "+" in sprintf result for a formatted scalar
 * This is "(y != '+') compress y", the hard way
 *
 ******************************************************************************/

inline
char[.] KillPlusSign(char[n] y)
{
  z = y;
  for( sink = 1, src = 1; src < n; src++) {
    z[sink] = y[src];
    sink =  (z[sink] != '+') ? sink + 1 : sink;
  }
  z = take( [sink], z);
  return( z);
}

/******************************************************************************
 *
 * Indexed assign el into vec for next result element
 *
 ******************************************************************************/

inline
char[.], int thrnAppend(char[.] vec, int sink, char[n] el)
{
  z = vec;
  for( src = 0; src < n; src++) {
    z[[sink]] = el[[src]];
    sink++;
  }
  return( z, sink);
}

/******************************************************************************
 *
 * Check for txt overflowing wid
 *
 ******************************************************************************/

inline
char[.] OverflowCheck(char[n] txt, int wid)
{
  z = (wid < n) ? genarray( [wid], '*') : txt;
  return( z);
}

/******************************************************************************
 *
 * Default format for any character array
 *
 ******************************************************************************/

inline
char[dim:shp] format(char[dim:shp] y)
{
  return( y);
}

/******************************************************************************
 *
 * Default format for Boolean scalar
 *
 ******************************************************************************/

inline
char[1] format(bool y)
{
  z = y ? '1' : '0';
  return( [z]);
}

/******************************************************************************
 *
 * Default format for Boolean non-scalars
 *
 ******************************************************************************/

inline
char[+] format(bool[dim:shp] y) | dim > 0
{
  z = with {
        (. <= iv <= .) : sel( iv, y) ? ['1', ' '] : ['0', ' '];
      } : genarray( shp);
  zs = drop( [_sub_SxS_(0,2)], shape( z));
  zs = zs ++ [prod( take( [_sub_SxS_(0,2)], shape( z)))];
  z = reshape( zs, z);
  lastcol = genarray( [dim(z)], 0);
  lastcol = modarray( lastcol, _sub_SxS_( dim( z), 1), _sub_SxS_( 0, 1));
  z = drop( lastcol, z);
  return( z);
}

/******************************************************************************
 *
 * Defined-precision format on Boolean scalar
 *
 ******************************************************************************/

char[.] format(bool y, int precision)
{
  z = format( tod( y), precision);
  return( z);
}

/******************************************************************************
 *
 * Precision-significant digit format on boolean non-scalar
 *
 ******************************************************************************/

char[+] format(bool[+] y, int precision)
{
  z = format( tod( y), precision);
  return( z);
}

/******************************************************************************
 *
 * Defined-width and precision format on boolean scalar 
 * w[0] is maximum legal result width. If result is wider than this,
 *      the result will be filled with asterixs. ('*')
 * w[1] is the number of significant digits to be printed.
 *
 ******************************************************************************/

char[.] format(bool y, int[2] w)
{
  z = format( tod( y), w);
  return( z);
}

/******************************************************************************
 *
 * Defined-width format on boolean non-scalar
 *
 ******************************************************************************/

char[+] format(bool[+] y, int[2] w)
{
  z = format( tod( y), w);
  return( z);
} 

/******************************************************************************
 *
 * Integer formatting functions
 *
 *   This includes int, uint, long, and ulong
 *
 ******************************************************************************/

/******************************************************************************
 *
 * Default format on integer scalar
 *
 ******************************************************************************/

char[.] format(int y)
{
 z = tochar(sprintf("%d",y));

#ifdef PEDANTIC
 /* This can be discarded, I think. */
 w = pmtl((ArrayArith::abs(y))); /* field width, including sign */
 w = w + toi(y < 0);
 /* Primitive integer scalar formatter, because sprintf is useless */
 /* See model DthornInt in WS UTThornInt.dws */
 z = genarray([w], ' ');
 z = modarray( z, [_sub_SxS_(w, 1)], '0'); /* Handle format 0 */
 sig = y < 0;
  /* We format all numbers as negative, to avoid integer overflow on (-2)*31  */
 cury = sig ? y : _sub_SxS_(0,y);
 i = _sub_SxS_(w,1);
 while ((cury != 0) && (i >= 0)) {
        nexty = cury /10; /* truncate toward zero */
        dig = abs(_sub_SxS_(cury,(nexty *10)));
        z = modarray( z, [i], sel( [dig], 
		['0','1','2','3','4','5','6','7','8','9']));
        cury = nexty;
	i = _sub_SxS_(i,1);
  }
  i = max(i,0);
  z = modarray( z, [i], sig && (i >= 0) ? '-' : sel([i], z));
#endif // PEDANTIC

 return( z);
}

char[.] format(long y)
{ /* Default format on long scalar */
 z = tochar(sprintf("%ld",y));
 return( z);
}
     
char[+] format(int[+] y)
{ /* Default format on integer non-scalar */
  /* Refer to UTThorn.dws <thint> for APL model of this */

  shpm = [prod(drop([_sub_SxS_(0,1)], 
		shape(y)))] ++ 
		take([_sub_SxS_(0,1)], shape(y));
  if ( 0 == prod( shpm)) {
	z = genarray(shape(y), ' ');
  } else {
  m = reshape(shpm,y);
  widths = pmtl(maxsl1(ArrayArith::abs(m)));
  /* Large negative number may need extra column for minus sign */
  maxneg = minsl1(m);
  neg = toi(maxneg < 0);
  maxneg2 = pmtl((ArrayArith::abs(maxneg)));
  widths = widths + neg * toi(maxneg2 >= widths);
  zcols = sum(widths + 1)-1;
  zdef = genarray([zcols], ' ');

  z = with{
        (. <= iv <= .) : formatrow( widths, sel (iv, m));
        } : genarray(take([1],shape(m)), zdef);

  shpz = drop([_sub_SxS_(0,1)], shape(y)) 
		++ take([_sub_SxS_(0,1)], shape(z));
  z = reshape(shpz, z);
 }
  return(z);
}

/******************************************************************************
 *
 * Defined-precision format on integer scalar
 *
 ******************************************************************************/

char[.] format(int y, int precision)
{
  z = format( tod( y), precision);
  return( z);
}

/******************************************************************************
 *
 * precision-significant digit format on integer non-scalar
 *
 ******************************************************************************/

char[+] format(int[+] y, int precision)
{
  z = format( tod( y), precision);
  return( z);
}

/******************************************************************************
 *
 * Defined-width and precision format on integer scalar
 *
 *   w[0] is maximum legal result width. If result is wider than this,
 *        the result will be filled with asterixs. ('*').
 *   w[1] is the number of significant digits to be printed.
 *
 ******************************************************************************/

char[.] format(int y, int[2] w)
{
  z = String::tochar( String::sprintf( "%*.*d", w[[0]], w[[1]], y));
  z = OverflowCheck( z, w[[0]]);
  return( z);
}

/******************************************************************************
 *
 * Float formatting functions
 *
 ******************************************************************************/

/******************************************************************************
 *
 * Default format on float scalar
 *
 ******************************************************************************/

char[.] format(float y)
{
  precision = 15;
  return(format(tod(y), precision));
}

/******************************************************************************
 *
 * Default format on float non-scalar
 *
 ******************************************************************************/

char[+] format(float[+] y)
{
  precision = 15;
  z = format( tod( y), precision);
  return( z);
} 

/******************************************************************************
 *
 * Defined-precision format on floating scalar
 *
 ******************************************************************************/

char[.] format(float y, int precision)
{
  z = format( tod( y), precision);
  return( z);
}

/******************************************************************************
 *
 * Precision-significant digit format on floating non-scalar
 *
 ******************************************************************************/

char[+] format(float[+] y, int precision)
{
  z = format( tod( y), precision);
  return( z);
}

/******************************************************************************
 *
 * Defined-width and precision format on floating scalar
 *
 *   w[0] is maximum legal result width. If result is wider than this,
 *        the result will be filled with asterixs. ('*').
 *   w[1] is the number of significant digits to be printed.
 *
 ******************************************************************************/

char[.] format(float y, int[2] w)
{
  z = format( tod( y), w);
  return( z);
}

/******************************************************************************
 *
 * Defined-width format on float non-scalar
 *
 *   w[0] is maximum legal result width. If result is wider than this,
 *        the result will be filled with asterixs. ('*').
 *   w[1] is the number of significant digits to be printed.
 *
 ******************************************************************************/

char[+] format(float[+] y, int[2] w)
{
  z = format( tod( y), w);
  return( z);
} 

/******************************************************************************
 *
 * Double formatting functions
 *
 ******************************************************************************/

#define DOINL inline
// This is a crude workaround for sac2c Issue #2333,
// which Bodo suggests requires major redesign of modules.

/******************************************************************************
 *
 * Default format on double scalar
 *
 ******************************************************************************/

DOINL
char[.] format(double y)
{
  precision = 15;
  z = format( y, precision);
  return( z);
}

/******************************************************************************
 *
 * Default format on double non-scalar
 *
 *   Refer to UTThorn.dws <threal> for APL model of this
 *
 ******************************************************************************/

DOINL
char[+] format(double[+] y)
{
  precision = 15;
  z = format( y, precision);
  return( z);
}

/******************************************************************************
 *
 * Formatting for a double scalar
 *
 ******************************************************************************/

DOINL
char[.] format(double y, int precision)
{
  z = ScalarFormatter( y, precision);
  z = PadWithBlanks( [precision + 7], z);
  return( z);
}

/******************************************************************************
 *
 * Precision-significant digit format on double non-scalar
 *
 *   Refer to UTThorn.dws <threal> for APL model of this
 *
 ******************************************************************************/

DOINL
char[+] format(double[dim:shp] y, int precision) | dim > 0
{
  rows = prod( drop( [-1], shp));
  cols = take( [-1], [1] ++ shp)[0];
  ravely = reshape( [prod( shp)], y);

  // Formatted results and their shapes
  // See ScalarFormatter for why the value 7 appears in next line
  wid = precision + 7;
  defcell = genarray( [wid], ' ');

  // Format each array element
  fry = with {
	        (. <= iv <= .) {
		        el = ScalarFormatter( ravely[iv], precision);  
            el = PadWithBlanks( [wid], el);
	        } : el;
        } : genarray( shape( ravely), defcell);

  // Determine width of each result column
  // First, chars left of decimal point
  lodp = with{
          (. <= iv <= .) : thcharsto([' ', '.'], fry[iv]);
        } : genarray( take( [1], shape( fry)), 0);

  // Decimal point and # non-blankchars to right of decimal point
  rodp = with{
          (. <= iv <= .) : thcharsto( [' ',' '], drop( [lodp[iv]], fry[iv]));
        } : genarray(take([1], shape(fry)), 0);

  lodpmax = maxsl1( reshape( [rows,cols], lodp));
  rodpmax = maxsl1( reshape( [rows,cols], rodp));
  widths = lodpmax + rodpmax;
  zcols = sum(widths + 2) - 1;  // Room for decimal point and blank
  shpz = drop( [-1], shape(y)) ++ [zcols];
  defcell = genarray( [zcols], ' ');

  z = with{
        (. <= iv <= .) : alignrow( fry, iv, widths, lodp, lodpmax, zcols);
      } : genarray( [rows], defcell);
  z = reshape( shpz, z);
  return( z);
} 

/******************************************************************************
 *
 * Formatting for a double scalar
 *
 *   This is temporary, pending use of the Burger/Dybvig algorithm 
 *   w[0] is maximum legal result width. If result is wider than this,
 *        the result will be filled with asterixs. ('*')
 *   w[1] is the number of significant digits to be printed.
 *
 ******************************************************************************/

DOINL
char[.] format(double y, int[2] w)
{
  z = String::tochar( String::sprintf( "%*.*g", w[[0]], w[[1]], y));
  z = OverflowCheck( z, w[[0]]);
  return( z);
}

/******************************************************************************
 *
 * Defined-width format on double non-scalar
 *
 *   w[0] is maximum legal result width. If result is wider than this,
 *        the result will be filled with asterixs. ('*')
 *   w[1] is the number of significant digits to be printed.
 *
 ******************************************************************************/

DOINL
char[+] format(double[dim:shp] y, int[2] w) | dim > 0
{
  defcell = genarray( [w[[0]]], ' ');
  z = with {
        ( . <= iv <= . ) : format( y[iv], w);
      } : genarray( shp, defcell);
  zshp = drop( [-2], shape( z)) ++ [prod( take( [-2], shape( z)))];
  z = reshape( zshp, z);
  return( z);
}

/******************************************************************************
 *
 * Generic type-driven formatting
 *
 ******************************************************************************/

#ifdef FULLTYPES

#define FORMAT_INT_SUBTYPES(type)			                                         \
char[.] format(type y)					                                               \
{							                                                                 \
  z = format( toi( y));					                                               \
  return( z);						                                                       \
}							                                                                 \
     							                                                             \
char[+] format(type[+] y)				                                               \
{							                                                                 \
  z = format( toi( y));					                                               \
  return( z);	  				                                                       \
}							                                                                 \
							                                                                 \
char[.] format(type y, int precision)	                                         \
{ 							                                                               \
  z = format( toi( y), precision);	                                           \
  return( z);						                                                       \
}							                                                                 \
							                                                                 \
char[+] format(type[+] y, int precision)	                                     \
{							                                                                 \
  z = format( toi( y), precision);				                                     \
  return( z);  					                                                       \
}							                                                                 \
							                                                                 \
char[.] format(type y, int[2] w)			                                         \
{							                                                                 \
  z = format( toi( y), w);					                                           \
  return( z);						                                                       \
}							

#ifdef NEEDSTYPECONVERSIONS

// These will not work until somebody writes suitable non-scalar type
// conversion functions for the following.
// BUG !! needs type conversions to int for these...  FORMAT_INT_SUBTYPES(byte)
// BUG !! FORMAT_INT_SUBTYPES(ubyte)
// BUG !! FORMAT_INT_SUBTYPES(short)
// BUG !! FORMAT_INT_SUBTYPES(ushort)
// BUG !! FORMAT_INT_SUBTYPES(uint)
FORMAT_INT_SUBTYPES(int)
FORMAT_INT_SUBTYPES(longlong)
FORMAT_INT_SUBTYPES(ulonglong)
FORMAT_INT_SUBTYPES(long)
FORMAT_INT_SUBTYPES(ulong)

#endif // NEEDSTYPECONVERSIONS

#endif // FULLTYPES
