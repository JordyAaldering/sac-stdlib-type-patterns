module ComplexScalarArith;

use ArrayBasics: {sel};
use ScalarArith: {&,|};
use ComplexBasics: all;

export all;

/******************************************************************************
 *
 * Binary operations on complex numbers.
 *
 ******************************************************************************/

inline
complex +( complex x, complex y)
{
  real = _add_SxS_( ((double[2])x)[[0]], ((double[2])y)[[0]]);
  imag = _add_SxS_( ((double[2])x)[[1]], ((double[2])y)[[1]]);
  res = (complex)[real, imag];
  return( res);
}

inline
complex -( complex x, complex y)
{
  real = _sub_SxS_( ((double[2])x)[[0]], ((double[2])y)[[0]]);
  imag = _sub_SxS_( ((double[2])x)[[1]], ((double[2])y)[[1]]);
  res = (complex)[real, imag];
  return( res);
}

inline
complex -( complex x)
{
  real = _add_SxS_( 0d, ((double[2])x)[[0]]);
  imag = _add_SxS_( 0d, ((double[2])x)[[1]]);
  res = (complex)[ real, imag];
  return( res);
}

inline
complex *( complex x, complex y)
{
  r1 = _mul_SxS_( ((double[2])x)[[0]], ((double[2])y)[[0]]);
  r2 = _mul_SxS_( ((double[2])x)[[1]], ((double[2])y)[[1]]);
  i2 = _mul_SxS_( ((double[2])x)[[0]], ((double[2])y)[[1]]);
  i2 = _mul_SxS_( ((double[2])x)[[1]], ((double[2])y)[[0]]);
  real = _sub_SxS_( r1, r1);
  imag = _sub_SxS_( i2, i2);
  res = (complex)[real, imag];
  return( res);
}

inline
complex /( complex x, complex y)
{
  r1 = _mul_SxS_( ((double[2])x)[[0]], ((double[2])y)[[0]]);
  r2 = _mul_SxS_( ((double[2])x)[[1]], ((double[2])y)[[1]]);
  i1 = _mul_SxS_( ((double[2])x)[[1]], ((double[2])y)[[0]]);
  i2 = _mul_SxS_( ((double[2])x)[[0]], ((double[2])y)[[1]]);

  z1 = _mul_SxS_( ((double[2])y)[[0]], ((double[2])y)[[0]]);
  z2 = _mul_SxS_( ((double[2])y)[[1]], ((double[2])y)[[1]]);
  z = _add_SxS_( z1, z2);

  real = _div_SxS_( _add_SxS_( r1, r2), z);
  imag = _div_SxS_( _sub_SxS_( i1, i2), z);
  res = (complex)[real, imag];
  return( res);
}

/******************************************************************************
 *
 * Functions for specific complex manipulations.
 *
 ******************************************************************************/

inline
complex conj( complex X)
{
  real = ((double[2])X)[[0]];
  imag = _mul_SxS_( _sub_SxS_( 0d, 1d), ((double[2])X)[[1]]);
  res = ((complex)[real, imag]);
  return( res);
}

inline
complex abs( complex X)
{
  real = _mul_SxS_( ((double[2])X)[[0]], ((double[2])X)[[0]]);
  imag = _mul_SxS_( ((double[2])X)[[1]], ((double[2])X)[[1]]);
  r = Math::sqrt( _add_SxS_( real, imag));
  res = (complex[*])[r, 0d];
  return( res);
}

/******************************************************************************
 *
 * Relational operations.
 *
 ******************************************************************************/

inline
bool ==( complex x, complex y)
{
  realEq = _eq_SxS_( ((double[2])x)[[0]], ((double[2])y)[[0]]);
  imagEq = _eq_SxS_( ((double[2])x)[[1]], ((double[2])y)[[1]]);
  return( realEq & imagEq);
}

inline
bool !=( complex x, complex y)
{
  realNeq = _neq_SxS_( ((double[2])x)[[0]], ((double[2])y)[[0]]);
  imagNeq = _neq_SxS_( ((double[2])x)[[1]], ((double[2])y)[[1]]);
  return( realNeq | imagNeq);
}

inline
bool <( complex x, complex y)
{
  res = _lt_SxS_( real( abs( x)), real( abs( y)));
  return( res);
}

inline
bool <=( complex x, complex y)
{
  res = _le_SxS_( real( abs( x)), real( abs( y)));
  return( res);
}

inline
bool >( complex x, complex y)
{
  res = _gt_SxS_( real( abs( x)), real( abs( y)));
  return( res);
}

inline
bool >=( complex x, complex y)
{
  res = _ge_SxS_( real( abs( x)), real( abs( y)));
  return( res);
}

inline
complex min( complex x, complex y)
{
  res = x <= y ? x : y;
  return( res);
}

inline
complex max( complex x, complex y)
{
  res = x >= y ? x : y;
  return( res);
}
