module Grey;

#define OVERLOADS toi,tod,dim,shape,sel,reshape,+,-
use Array: all except {OVERLOADS};
import Array: {OVERLOADS};

export all;

typedef int grey;

inline
int toi( grey g)
{
  res = (int)g;
  return( res);
}

inline
double tod( grey g)
{
  res = tod( (int)g);
  return( res);
}

inline
grey newGrey( int i)
{
  i = clamp( i, 0, 255);
  res = (grey)i;
  return( res);
}

inline
grey newGrey( double d)
{
  d = clamp( d, 0d, 255d);
  res = (grey)toi( d);
  return( res);
}

inline
int dim( grey[*] a)
{
  res = dim( (int[*])a);
  return( res);
}

inline
int[.] shape( grey[*] a)
{
  res = shape( (int[*])a);
  return( res);
}

inline
grey[*] sel( int[.] idx, grey[*] a)
{
  v = ((int[*])a)[idx];
  res = (grey[*])v;
  return( res);
}

inline
grey[d:shp] reshape( int[d] shp, grey[*] a)
{
  v = reshape( shp, (int[*])a);
  res = (grey[*])v;
  return( res);
}

inline
grey +( grey g1, grey g2)
{
  res = newGrey( toi( g1) + toi( g2));
  return( res);
}

inline
grey -( grey g1, grey g2)
{
  res = newGrey( toi( g1) - toi( g2));
  return( res);
}
