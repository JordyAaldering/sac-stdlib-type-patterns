module ComplexBasics;

#define OVERLOADS toi,tof,tod,zero,one
use Array: all except { OVERLOADS };
import Array: { OVERLOADS };

export all;

typedef double[2] complex;

/******************************************************************************
 *
 * Functions for composing and decomposing of complex numbers.
 *
 ******************************************************************************/

inline
double real( complex c)
{
  res = ((double[2])c)[0];
  return( res);
}

inline
double imag( complex c)
{
  res = ((double[2])c)[1];
  return( res);
}

/******************************************************************************
 *
 * Simple conversion functions between complex, real and integer numbers.
 *
 ******************************************************************************/

inline
complex toc( int real, int imag)
{
  res = (complex)[ScalarArith::tod(real), ScalarArith::tod(imag)];
  return( res);
}

inline
complex toc( float real, float imag)
{
  res = (complex)[ScalarArith::tod(real), ScalarArith::tod(imag)];
  return( res);
}

inline
complex toc( double real, double imag)
{
  res = (complex)[real, imag];
  return( res);
}

inline
complex toc( double[2] a)
{
  res = (complex)a;
  return( res);
}

inline
complex toc( int real)
{
  res = (complex)[ScalarArith::tod(real), 0d];
  return( res);
}

inline
complex toc( float real)
{
  res = (complex)[ScalarArith::tod(real), 0d];
  return( res);
}

inline
complex toc( double real)
{
  res = (complex)[real, 0d];
  return( res);
}

/******************************************************************************
 *
 * Extract real and imag part from c complex number.
 *
 ******************************************************************************/

inline
int, int toi( complex c)
{
  r = ScalarArith::toi( real( c));
  i = ScalarArith::toi( imag( c));
  return( r, i);
}

inline
float, float tof( complex c)
{
  r = ScalarArith::tof( real( c));
  i = ScalarArith::tof( imag( c));
  return( r, i);
}

inline
double, double tod( complex c)
{
  r = real( c);
  i = imag( c);
  return( r, i);
}

inline
double[2] todv( complex c)
{
  res = [real( c), imag( c)];
  return( res);
}

inline
String::string tos( complex c)
{
  r, i = tod( c);
  res = String::sprintf( "%f + %fi\n", r, i);
  return( res);
}

inline
int, int ptoi( complex c)
{
  x, y = ptof( c);
  r = ScalarArith::toi( x);
  i = ScalarArith::toi( y);
  return( r, i);
}

inline
float, float ptof( complex c)
{
  x, y = tof( c);
  r = Math::sqrt( ScalarArith::tof( norm( c)));
  i = Math::atan2( x, y);
  return( r, i);
}

inline
double, double ptod( complex c)
{
  r = Math::sqrt( norm( c));
  i = Math::atan2( real( c), imag( c));
  return( r, i);
}

/******************************************************************************
 *
 * Functions for composing and decomposing of complex numbers using polar
 * coordinates.
 *
 ******************************************************************************/

inline
complex polar( double mag, double angle)
{
  r = _mul_SxS_( mag, Math::cos( angle));
  i = _mul_SxS_( mag, Math::sin( angle));
  res = (complex)[r, i];
  return( res);
}

inline
complex polar( double mag)
{
  res = (complex)[mag, 0d];
  return( res);
}

inline
double normSq( complex c)
{
  x = _mul_SxS_( ((double[2])c)[[0]], ((double[2])c)[[0]]);
  y = _mul_SxS_( ((double[2])c)[[1]], ((double[2])c)[[1]]);
  res = _add_SxS_( x, y);
  return( res);
}

inline
double norm( complex c)
{
  res = Math::sqrt( normSq( c));
  return( res);
}

inline
double arg( complex c)
{
  res = Math::atan2( ((double[2])c)[[0]], ((double[2])c)[[1]]);
  return( res);
}

/******************************************************************************
 *
 * Complex constants.
 *
 ******************************************************************************/

inline
complex i()
{
  res = toc( 0, 1);
  return( res);
}

inline
complex zero()
{
  res = toc( 0, 0);
  return( res);
}

inline
complex zero( complex[*] c)
{
  /* Provided for compatibility with UDT macro mechanism */
  res = toc( 0, 0);
  return( res);
}

inline
complex one()
{
  res = toc( 1, 0);
  return( res);
}

inline
complex one( complex[*] c)
{
  /* Provided for compatibility with UDT macro mechanism */
  res = toc( 1, 0);
  return( res);
}
