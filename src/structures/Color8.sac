module Color8;

use MathArray: all;
#define OVERLOADS toi,tod,dim,shape,sel,reshape,+,-,*
use Array: all except {OVERLOADS};
import Array: {OVERLOADS};

export all except {Weights2Clut,genSteps};

typedef int[3] color;

inline
color black()
{
  res = (color)[0,0,0];
  return( res);
}

inline
color white()
{
  res = (color)[255,255,255];
  return( res);
}

inline
color red()
{
  res = (color)[255,0,0];
  return( res);
}

inline
color green()
{
  res = (color)[0,255,0];
  return( res);
}

inline
color blue()
{
  res = (color)[0,0,255];
  return( res);
}

inline
int red( color col)
{
  res = ((int[3])col)[0];
  return( res);
}

inline
int green( color col)
{
  res = ((int[3])col)[1];
  return( res);
}

inline
int blue( color col)
{
  res = ((int[3])col)[2];
  return( res);
}

inline
color newColor( int[3] col)
{
  res = clamp( col, 0, 255);
  return( (color)res);
}

inline
color newColor( int r, int g, int b)
{
  res = clamp( [r,g,b], 0, 255);
  return( (color)res);
}

inline
int[3] toi( color c)
{
  res = (int[3])c;
  return( res);
}

inline
int[+] toi( color[*] c)
{
  res = (int[+])c;
  return( res);
}

inline
double[3] tod( color c)
{
  return( tod( (int[3])c));
}

inline
double[+] tod( color[*] c)
{
  res = tod( (int[+])c);
  return( res);
}

inline
int dim( color[*] c)
{
  res = dim( (int[+])c) - 1;
  return( res);
}

inline
int[.] shape( color[*] c)
{
  res = drop( [-1], shape( (int[+])c));
  return( res);
}

inline
color[*] sel( int[.] idx, color[*] c)
{
  v = ((int[+])c)[idx];
  res = (color[*])v;
  return( res);
}

inline
color[*] sel( int idx, color[*] c)
{
  res = sel( [idx], c);
  return( res);
}

inline
color[d:shp] reshape( int[d:shp] shp, color[*] c)
{
  v = reshape( shp ++ [3], (int[+])c);
  res = (color[*])v;
  return( res);
}

inline
double[256] genSteps( double from, double to)
{
  res = from + tod( iota( 256)) / 256d * (to - from);
  return( res);
}

inline
color[256] Weights2Clut( double[256] w, color c1, color c2)
{
  a = { iv -> w[iv] * tod( (int[3])c1) };
  b = { iv -> (1d - w[iv]) * tod( (int[3])c2) };
  res = (color[256])toi( a + b);
  return( res);
}

inline
color[256] genLinearClut( color c1, color c2)
{
  weights = genSteps( 0d, 1d);
  res = Weights2Clut( weights, c1, c2);
  return( res);
}

inline
color[256] genLogarithmicClut( double from, double to, color c1, color c2)
{
  steps = genSteps( from, to);
  weights = (log( steps) - log( from)) / (log( to) - log( from));
  res = Weights2Clut( weights, c1, c2);
  return( res);
}

inline
color[256] genExponentialClut( double from, double to, color c1, color c2)
{
  steps = genSteps( from, to);
  weights = (exp( steps) - exp( from)) / (exp( to) - exp( from));
  res = Weights2Clut( weights, c1, c2);
  return( res);
}

inline
color[256] genAlternatingClut( color c1, color c2)
{
  res = with {
          ( . <= [i] <= . step [2] ) : c1;
        } : genarray( [256], c2 );
  return( res);
}

/******************************************************************************
 *
 * h_in is the hue in degrees [0:360]
 * s_in is the saturation in % [0:100]
 * b_in is the brightness in % [0:100]
 *
 ******************************************************************************/
inline
color Hsb2Rgb( int h_in, int s_in, int b_in)
{
  if( b_in == 0) {
    res = black();
  } else if( b_in == 100 && s_in == 0) {
    res = white();
  } else if( s_in == 0) {
    res = newColor( b_in, b_in, b_in);
  } else {
    h = tod( h_in) / 60d;
    s = tod( s_in) / 100d;
    b = tod( b_in) / 100d;

    i = toi( h) % 6;
    f = h - tod( i);

    if( ( i % 2) == 0) {
      f = 1d - f;
    }

    m = b * ( 1d - s);
    n = b * ( 1d - s * f);

    b = toi( b * 255d);
    m = toi( m * 255d);
    n = toi( n * 255d);

    if( 0 == i) {
      res = newColor( b, n, m);
    } else if( 1 == i) {
      res = newColor( n, b, m);
    } else if( 2 == i) {
      res = newColor( m, b, n);
    } else if( 3 == i) {
      res = newColor( m, n, b);
    } else if( 4 == i) {
      res = newColor( n, m, b);
    } else if( 5 == i) {
      res = newColor( b, m, n);
    } else {
      res = black();
    }
  }

  return( res);
}

inline
color[d:shp] Hsb2Rgb( int[d:shp] h_in, int s_in, int b_in)
{
  res = with {
          (0*shp <= iv < shp)
            : Hsb2Rgb( h_in[iv], s_in, b_in);
        } : genarray( shp, black());
  return( res);
}

inline
color[d:shp] Hsb2Rgb( int[d:shp] h_in, int[d:shp] s_in, int[d:shp] b_in)
{
  res = with {
          (0*shp <= iv < shp)
            : Hsb2Rgb( h_in[iv], s_in[iv], b_in[iv]);
        } : genarray( shp, black());
  return( res);
}

inline
color +( color a, color b)
{
  res = newColor( red( a)   + red( b),
                  green( a) + green( b),
                  blue( a)  + blue( b));
  return( res);
}

inline
color[d:shp] +( color[d:shp] a, color[d:shp] b)
{
  res = with{
          (0*shp <= iv < shp) : a[iv] + b[iv];
        } : genarray( shp, black());
  return( res);
}

inline
color -( color a, color b)
{
  res = newColor( red( a)   - red( b),
                  green( a) - green( b),
                  blue( a)  - blue( b));
  return( res);
}

inline
color[d:shp] -( color[d:shp] a, color[d:shp] b)
{
  res = with{
          (0*shp <= iv < shp) : a[iv] -  b[iv];
        } : genarray( shp, white());
  return( res);
}

inline
color *( color c, double x)
{
  res = newColor( toi( tod( red( c))   * x),
                  toi( tod( green( c)) * x),
                  toi( tod( blue( c))  * x));
  return( res);
}

inline
color[d:shp] *( color[d:shp] c, double x)
{
  res = with{
          (0*shp <= iv < shp) : c[iv] * x;
        } : genarray( shp, white());
  return( res);
}
