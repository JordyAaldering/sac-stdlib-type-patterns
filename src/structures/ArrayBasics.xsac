module ArrayBasics;

use ScalarArith: {zero};
export all;

#include "Templates.mac"

/******************************************************************************
 *
 * @fn int dim( <a>[*] Array)
 *
 * @brief yields an array's dimensionality (rank).
 *
 ******************************************************************************/

#define DIM( typ, postfix, zval, oval)                                         \
inline                                                                         \
int dim( typ[dim:shp] array)                                                   \
{                                                                              \
  return( dim);                                                                \
}

BUILT_IN( DIM)


/******************************************************************************
 *
 * @fn int[.] shape( <a>[*] Array)
 *
 * @brief yields an array's shape vector.
 *
 ******************************************************************************/

#define SHAPE( typ, postfix, zval, oval)                                       \
inline                                                                         \
int[dim] shape( typ[dim:shp] array)                                            \
{                                                                              \
  return( shp);                                                                \
}

BUILT_IN( SHAPE)


/******************************************************************************
 *
 * @fn <a>[*] reshape( int[.] shp, <a>[*] Array)
 *
 * @brief creates a new array with identical data vector but new shape,
 *           provided the length of the data vector matches the product of
 *           the new shape vector.
 *
 ******************************************************************************/

#define RESHAPE( typ, postfix, zval, oval)                                     \
inline                                                                         \
typ[n:shp] reshape( int[n] shp, typ[*] A)                                      \
{                                                                              \
  return( _reshape_VxA_( shp, A));                                             \
}

BUILT_IN( RESHAPE)

#ifdef RBE

/******************************************************************************
 *
 * @fn bool IsSameShape( int[.] shapea, int[.] shapeb)
 *
 * @brief Predicate for ensuring shape vectors match
 *
 ******************************************************************************/

inline
bool IsSameShape( int[n] shapeA, int[m] shapeB)
{
  if ( _eq_( n, m)) {
  	res = true;
  	for (i = 0; _and_( res, _lt_( i, n)); i = _add_SxS_( i, 1)) {
      sx = _sel_( [i], shapeA);
      sy = _sel_( [i], shapeB);
      res = _and_( res, _eq_( sx, sy));
	  }
  } else {
	  res = false;
  }
  return( res);
}

/******************************************************************************
 *
 * @fn int xrhoshape( int[.] ShapeVector)
 *
 * @brief Computes the product of a shape vector
 *        The important thing that is MISSING(!!!) here is check for
 *        overflow. For example:
 *          - last-axis reduce genarray( [256,256,256,256,0],0)
 *          - genarray( genarray([32],2), 1)
 *
 *        This is where security bugs start!
 *
 ******************************************************************************/

inline
int xrhoshape( int[n] S)
{
  res = 1; /* Can't figure out how to make fold work here... */
  for(i = 0; _lt_( i, n); i = _add_SxS_( i, 1)) {
	  res = _mul_SxS_( res, S[[i]]);
  }
  return( res);
}

/******************************************************************************
 *
 * @fn <a>[.] ravel( <a>[*] Array)
 *
 * @brief Creates a vector with identical data vector to original array.
 *
 ******************************************************************************/

#define RAVEL( typ, postfix, zval, oval)                                       \
inline                                                                         \
typ[.] ravel( typ[dim:shp] A)                                                  \
{                                                                              \
  res = _reshape_( [xrhoshape( shp)], A);                                      \
  return( res);                                                                \
}

BUILT_IN( RAVEL)

#endif /* RBE */

/******************************************************************************
 *
 * @fn <a>[*] sel( int[.] idx, <a>[*] Array)
 *
 * @brief selects the subarray of Array at position idx, provided
 *           shape( idx)[[0]] <= dim( Array)    holds.
 *
 ******************************************************************************/

#define SEL_VxA( typ, postfix, zval, oval)                                     \
inline                                                                         \
typ[dim:shp] sel( int[vlen] idx, typ[vlen:vshp,dim:shp] array)                 \
  | _all_V_( idx < vshp)                                                       \
{                                                                              \
  res = with {                                                                 \
          (_mul_SxV_( 0, shp) <= iv < shp) {                                   \
            new_idx = _cat_VxV_( idx, iv);                                     \
          } : _sel_VxA_( new_idx, array);                                      \
        } : genarray( shp, zval);                                              \
  return( res);                                                                \
}

BUILT_IN( SEL_VxA)

/******************************************************************************
 *
 * @fn <a>[*] sel( int idx, <a>[*] Array)
 * 
 * @brief generalizes selections for scalar indices.
 *
 ******************************************************************************/

#define SEL_SxA( typ, postfix, zval, oval)                                     \
inline                                                                         \
typ[dim:shp] sel( int idx, typ[.,dim:shp] A)                                   \
{                                                                              \
  res = sel( [idx], A);                                                        \
  return( res);                                                                \
}

BUILT_IN( SEL_SxA)

/******************************************************************************
 *
 * @fn <a>[*] modarray( <a>[*] Array, int[.] idx, <a> val)
 * 
 * @brief modifies the element of Array at position idx, provided 
 *           shape( idx)[[0]] == dim( Array) holds.
 *
 ******************************************************************************/

#define GENARRAY( typ, postfix, zval, oval)                                    \
inline                                                                         \
typ[*] genarray( int[.] shp, typ[*] val)                                       \
{                                                                              \
  res = with {                                                                 \
          ( . <= iv <= . ) : val;                                              \
        } : genarray( shp, val );                                              \
  return( res);                                                                \
}

#define MODARRAY_AxVxS( typ, postfix, zval, oval)                              \
inline                                                                         \
typ[dim:shp] modarray( typ[dim:shp] array, int[dim] idx, typ[] val)            \
{                                                                              \
  res = _modarray_AxVxS_( array, idx, val);                                    \
  return( res);                                                                \
}

#define MODARRAY_AxVxA( typ, postfix, zval, oval)                              \
inline                                                                         \
typ[*] modarray( typ[*] array, int[.] v, typ[+] val)                           \
{                                                                              \
  res = with {                                                                 \
          ( v <= iv <= v ) : val;                                              \
        } : modarray( array);                                                  \
  return( res);                                                                \
}

#define MODARRAY_AxSxX( typ, postfix, zval, oval)                              \
inline                                                                         \
typ[*] modarray( typ[*] array, int v, typ[*] val)                              \
{                                                                              \
  res = modarray( array, [v], val);                                            \
  return( res);                                                                \
}

#define MODARRAY( typ, postfix, zval, oval)                                    \
  MODARRAY_AxVxS( typ, postfix, zval, oval)                                    \
  MODARRAY_AxSxX( typ, postfix, zval, oval)                                    \
  MODARRAY_AxVxA( typ, postfix, zval, oval)

BUILT_IN( GENARRAY)
BUILT_IN( MODARRAY)

/******************************************************************************
 *
 * @fn <a>[*] iota( int[.] shp)
 *
 * @brief creates an array of `shp` and fills it with [0, maxindex (shp)]
 *          values.
 *
 ******************************************************************************/

inline
int[dim] iota( int dim)
{
  res = with {
          ( [0] <= [i] <= [dim] ) : i;
        } : genarray( [dim], 0);
  return( res);
}

inline
int[dim:shp] iota( int[dim] shp)
{
  res = with {
          ( . <= iv <= . ) : iv;
        } : genarray( shp, _mul_SxV_( 0, shp));
  return( res);
}
