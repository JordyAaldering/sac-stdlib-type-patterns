module ArrayBasics;

use ScalarArith: {++,--,&};

export all;

#include "Templates.mac"

/******************************************************************************
 *
 * @fn int dim( <a>[d:shp] array)
 *
 * @brief yields an array's dimensionality (rank).
 *
 ******************************************************************************/

#define DIM( typ, postfix, zval, oval)                                         \
inline                                                                         \
int dim( typ[d:shp] array)                                                     \
{                                                                              \
  return( d);                                                                  \
}

BUILT_IN( DIM)


/******************************************************************************
 *
 * @fn int[d] shape( <a>[d:shp] array)
 *
 * @brief yields an array's shape vector.
 *
 ******************************************************************************/

#define SHAPE( typ, postfix, zval, oval)                                       \
inline                                                                         \
int[d] shape( typ[d:shp] array)                                                \
{                                                                              \
  return( shp);                                                                \
}

BUILT_IN( SHAPE)


/******************************************************************************
 *
 * @fn <a>[d:shp] reshape( int[d] shp, <a>[*] array)
 *
 * @brief creates a new array with identical data vector but new shape,
 *        provided the length of the data vector matches the product of
 *        the new shape vector.
 *
 ******************************************************************************/

#define RESHAPE( typ, postfix, zval, oval)                                     \
inline                                                                         \
typ[d:shp] reshape( int[d] shp, typ[*] array)                                  \
{                                                                              \
  res = _reshape_VxA_( shp, array);                                            \
  return( res);                                                                \
}

BUILT_IN( RESHAPE)


#ifdef RBE

/******************************************************************************
 *
 * @fn bool IsSameShape( int[n] shapeA, int[m] shapeB)
 *
 * @brief predicate for ensuring shape vectors match.
 *
 ******************************************************************************/

inline
bool IsSameShape( int[n] shpA, int[m] shpB)
{
  res = _and_SxS_( _eq_SxS_( n, m),
                   _all_V_( _eq_VxV_ shpA, shpB));
  return( res);
}


/******************************************************************************
 *
 * @fn int xrhoshape( int[n] shp)
 *
 * @brief computes the product of a shape vector
 *        The important thing that is MISSING(!!!) here is check for
 *        overflow. For example:
 *          - last-axis reduce genarray( [256,256,256,256,0], 0)
 *          - genarray( genarray([32], 2), 1)
 *
 *        This is where security bugs start!
 *
 ******************************************************************************/

inline
int xrhoshape( int[n] shp)
{
  res = with {
          ([0] <= iv < [n]) : shp[ iv];
        } : fold( _mul_SxV_, 1);
  return( res);
}


/******************************************************************************
 *
 * @fn <a>[.] ravel( <a>[d:shp] array)
 *
 * @brief creates a vector with identical data vector to original array.
 *
 ******************************************************************************/

#define RAVEL( typ, postfix, zval, oval)                                       \
inline                                                                         \
typ[.] ravel( typ[d:shp] array)                                                \
{                                                                              \
  res = _reshape_( [xrhoshape( shp)], array);                                  \
  return( res);                                                                \
}

BUILT_IN( RAVEL)

#endif /* RBE */


/******************************************************************************
 *
 * @fn <a>[*] sel(int[vlen] idx, <a>[vlen:vshp,d:shp] array)
 *
 * @brief selects the subarray of the array at position idx, provided the index
 *        vector is no longer than the rank of the array, and each index element
 *        is no longer than the corresponding array shape element.
 *
 ******************************************************************************/

#define SEL_VxA( typ, postfix, zval, oval)                                     \
inline                                                                         \
typ[d:shp] sel( int[vlen] idx, typ[vlen:vshp,d:shp] array)                     \
  | _all_V_( idx < vshp)                                                       \
{                                                                              \
  res = with {                                                                 \
          (_mul_SxV_( 0, shp) <= iv < shp)                                     \
            : _sel_VxA_( _cat_VxV_( idx, iv), array);                          \
        } : genarray( shp, zval);                                              \
  return( res);                                                                \
}

BUILT_IN( SEL_VxA)


/******************************************************************************
 *
 * @fn <a>[d:shp] sel( int idx, <a>[.,d:shp] array)
 *
 * @brief generalizes selections for scalar indices.
 *
 ******************************************************************************/

#define SEL_SxA( typ, postfix, zval, oval)                                     \
inline                                                                         \
typ[d:shp] sel( int idx, typ[.,d:shp] array)                                   \
{                                                                              \
  res = sel( [idx], array);                                                    \
  return( res);                                                                \
}

BUILT_IN( SEL_SxA)


/******************************************************************************
 *
 * @fn <a>[n:shp,d:vshp] genarray( int[n] shp, <a>[d:vshp] value)
 *
 * @brief generates a new array from the given shape and default value.
 *
 ******************************************************************************/

#define GENARRAY( typ, postfix, zval, oval)                                    \
inline                                                                         \
typ[n:shp,d:vshp] genarray( int[n] shp, typ[d:vshp] value)                     \
{                                                                              \
  res = with {                                                                 \
          (_mul_SxV_( 0, shp) <= iv < shp) : value;                            \
        } : genarray( shp, value);                                             \
  return( res);                                                                \
}

BUILT_IN( GENARRAY)


/******************************************************************************
 *
 * @fn <a>[d:shp] modarray( <a>[d:shp] array, int[d] idx, <a> val)
 *
 * @brief modifies the element of the array at position idx.
 *
 ******************************************************************************/

#define MODARRAY_AxVxS( typ, postfix, zval, oval)                              \
inline                                                                         \
typ[d:shp] modarray( typ[d:shp] array, int[d] idx, typ val)                    \
{                                                                              \
  res = _modarray_AxVxS_( array, idx, val);                                    \
  return( res);                                                                \
}

#define MODARRAY_AxVxA( typ, postfix, zval, oval)                              \
inline                                                                         \
typ[vlen:vshp,d:shp]                                                           \
modarray( typ[vlen:vshp,d:shp] array, int[vlen] idx, typ[d:shp] val)           \
  | _all_V_( idx < shp1)                                                       \
{                                                                              \
  res = with {                                                                 \
          (idx <= iv <= idx) : val;                                            \
        } : modarray( array);                                                  \
  return( res);                                                                \
}

#define MODARRAY_AxSxX( typ, postfix, zval, oval)                              \
inline                                                                         \
typ[n,d:shp] modarray( typ[n,d:shp] array, int idx, typ[d:shp] val)            \
{                                                                              \
  res = modarray( array, [idx], val);                                          \
  return( res);                                                                \
}

#define MODARRAY( typ, postfix, zval, oval)                                    \
MODARRAY_AxVxS( typ, postfix, zval, oval)                                      \
MODARRAY_AxVxA( typ, postfix, zval, oval)                                      \
MODARRAY_AxSxX( typ, postfix, zval, oval)

BUILT_IN( MODARRAY)


/******************************************************************************
 *
 * @fn int[d:shp] iota( int[d] shp)
 *
 * @brief creates an array of the given shape with values ranging from 0 to d.
 *
 ******************************************************************************/

inline
int[d] iota( int d)
{
  res = with {
          ([0] <= [i] < [d]) : i;
        } : genarray( [d], 0);
  return( res);
}

inline
int[d:shp] iota( int[d] shp)
{
  res = with {
          (_mul_SxV_( 0, shp) <= iv < shp) : iv;
        } : genarray( shp, _mul_SxV_( 0, shp));
  return( res);
}
