module StringArray;

use String: { string };
#define OVERLOADS ==,dim,shape,sel,drop,genarray,modarray
use Array: all except { OVERLOADS };
import Array: { OVERLOADS };

export all except { eq_SxS, eq_SxA, eq_AxS, eq_AxA, sel_VxA, getIndices,
                    modarray_AxVxS, stringArrayCreator, drop };

/*
 * You can create a new stringArray using:
 *   genarray( shp, to_stringArray( "default string"))
 *
 * Modarray and sel work as usual and return stringarrays. Use to_string to
 * get a string back out of a scalar stringarray.
 */

external typedef stringArray;
  #pragma linkobj "src/StringArray/free.o"
  #pragma linkobj "src/StringArray/copy.o"
  #pragma linkobj "src/StringArray/alloc.o"
  #pragma freefun "SAC_StringArray_free"
  #pragma copyfun "SAC_StringArray_copy"

external stringArray modarray_AxVxS( stringArray labs, int[.] idx, string  str);
  #pragma linkname "SAC_StringArray_modarray"
  #pragma linkobj "src/StringArray/modarray.o"
  #pragma linkobj "src/StringArray/index2offset.o"
  #pragma refcounting[ 0,1,2,3]
  #pragma linksign[ 1,2,3,4]

int[.,.] getIndices( int[d] shp)
{
  res = reshape( [prod( take( [d - 1], shp)), d], iota( shp));
  return( res);
}

stringArray drop( int[n] v, stringArray[d:shp] A)
{
  vext = v ++ genarray( [d - n], 0);
  new_shp = shp - abs( vext);

  new_shp = where( new_shp < 0, 0, new_shp);
  offset = where( vext < 0, 0, vext);
  offset = where( shp < offset, 0, offset);

  res = genarray( new_shp, to_stringArray( ""));
  indices = getIndices( new_shp);
  for (i = 0; i < shape( indices)[0]; i++) {
    idx = indices[i];
    res[ idx] = sel( [offset + idx], A);
  }

  return( res);
}

stringArray[o:outer,i:inner] modarray( stringArray[o:outer,i:inner] A,
                                       int[o] idx, stringArray[i:inner] val)
  | all( 0 < idx), all( idx < outer)
{
  if (i == 0) {
    res = modarray_AxVxS( A, idx, sel_VxA( [], val));
  }
  else {
    res = A;
    indices = getIndices( inner);
    ub = shape( indices)[0];
    for (i = 0; i < ub; i += 1) {
      modarrayidx = idx ++ indices[i];
      modArrVal = sel_VxA( indices[i], val);
      res = modarray_AxVxS( res, modarrayidx, modArrVal);
    }
  }
  return( res);
}

external string sel_VxA( int[.] idx, stringArray A);
  #pragma linkname "SAC_StringArray_sel"
  #pragma linkobj "src/StringArray/sel.o"
  #pragma linkobj "src/StringArray/index2offset.o"
  #pragma refcounting[ 0,1,2]
  #pragma linksign[ 1,2,3]

stringArray[d:shp] sel( int[vlen] idx, stringArray[vlen:vshp,d:shp] A)
  | all( 0 < idx), all( idx < vshp)
{
  if (d == 0) {
    res = to_stringArray( sel_VxA( idx, A));
  }
  else {
    if (shp[0] == 0) {
      RuntimeError::error( 1, "res_shape is [0]");
    }
    indices = getIndices( shp);
    res = genarray( shp, to_stringArray( ""));
    for (i = 0; i < shape( indices)[0]; i += 1) {
      res = modarray( res, indices[i], sel( idx ++ indices[i], A));
    }
  }
  return( res);
}

string to_string( stringArray[d:shp] A)
{
  if (d != 0) {
    RuntimeError::error( 1, "to_string passed non-scalar stringArray");
  }
  res = sel_VxA( [], A);
  return( res);
}

stringArray to_stringArray( string s)
{
  res = stringArrayCreator( [], s);
  return( res);
}

external int dim( stringArray s);
  #pragma linkname "SAC_StringArray_dim"
  #pragma linkobj "src/StringArray/dim.o"
  #pragma refcounting[ 0,1]
  #pragma linksign[ 1,2]

external int[.] shape( stringArray s);
  #pragma linkname "SAC_StringArray_shape"
  #pragma linkobj "src/StringArray/shape.o"
  #pragma refcounting[ 0,1]
  #pragma linksign[ 1,2]

external stringArray stringArrayCreator( int[.] shp, string s);
  #pragma linkname "SAC_StringArray_genarray"
  #pragma linkobj "src/StringArray/genarray.o"
  #pragma refcounting[ 0,1,2]
  #pragma linksign[ 1,2,3]

stringArray[n:shp,m:inner] genarray( int[n] shp, stringArray[m:inner] A)
{
  new_shp = shp ++ inner;
  res = stringArrayCreator( new_shp, "");
  indices = getIndices( shp);
  for (i = 0; i < shape( indices)[0]; i += 1) {
    res = modarray( res, indices[i], A);
  }
  return( res);
}

inline
bool eq_SxS ( stringArray A, stringArray B)
{
  res = to_string( A) String::== to_string( B);
  return( res);
}

inline
bool[d:shp] eq_SxA( stringArray A, stringArray[d:shp] B)
{
  res = with {
          (0*shp <= iv < shp)
            : to_string( A) String::== sel_VxA( iv, B);
        } : genarray( shp, true);
  return( res);
}

inline
bool[d:shp] eq_AxS( stringArray[d:shp] A, stringArray B)
{
  res = with {
          (0*shp <= iv < shp)
            : sel_VxA( iv, A) String::== to_string( B);
        } : genarray( shp, true);
  return( res);
}

inline
bool[d:shp] eq_AxA( stringArray[d:shp] A, stringArray[d:shp] B)
{
  res = with {
          (0*shp <= iv < shp)
            : sel_VxA( iv, A) String::== sel_VxA( iv, B);
        } : genarray( shp, true);
  return( res);
}

inline
bool[*] ==( stringArray[dA:shpA] A, stringArray[dB:shpB] B)
{
  if (dA == 0) {
    if (dB == 0 ) {
      res = eq_SxS( A, B);
    } else {
      res = eq_SxA( A, B);
    }
  } else {
    if (dB == 0) {
      res = eq_AxS( A, B);
    } else if (all( shpA == shpB)) {
      res = eq_AxA( A, B);
    } else {
      RuntimeError::error( 1, "(==) applied to arrays of different shape!");
      res = false;
    }
  }
  return( res);
}

/* I'd love to name this funcion ++ but if I do then when I use Structures,
 * ++ on integers can no longer be found.
 * N.b. The specific error is:
 *   No definition found for a function "Structures::++" that accepts an
 *   argument of type "int[0]{}" as parameter no 1. Full argument types
 *   are "( int[0]{}, int[.])".
 */
stringArray concatStringArrays( stringArray[dA:shpA] A, stringArray[dB:shpB] B)
  | dA > 0, dA == dB
{
  innerA = drop( [1], shpA);
  innerB = drop( [1], shpB);
  if (any( innerA != innerB)) {
    RuntimeError::error( 1,
        "Attempt to concat non-matching shapes when trying to concat "
        "two stringArrays");
  }
  m1Len = sel( [0], shpA);
  m2Len = sel( [0], shpB);
  resShape = [m1Len + m2Len] ++ innerA;
  res = genarray( resShape, to_stringArray( ""));
  for (i = 0; i < m1Len; i += 1) {
    res = modarray( res, [i], sel( [i], A));
  }
  for (j = 0; j < m2Len; j += 1) {
    res = modarray( res, [m1Len + j], sel( [j], B));
  }
  return( res);
}

/*
 * Returns true if needle exists in haystack
 */
bool in( string needle, stringArray[d:shp] haystack)
{
  res = with {
          (0*shp <= iv < shp)
            : to_string( haystack[ iv]) String::== needle;
        } : fold( |, true);
  return( res);
}

/*
 * Returns the index into haystack for the string needle.
 * N.b. before calling this function call 'in' to ensure that the needle you are
 * searching for really is in the haystack!
 */
int[m] indexOf( string needle, stringArray[d:shp] haystack)
{
  /*
   * This code would be a lot nicer if I could scrap the with loops and use the
   * set notation in comments but depsite this working when I tried it in
   * UnibenchInput it fails at compile time when I try it here saying:
   *   No shape information found for index scalar 'i'.
   */
  indices = getIndices( shp);
  n = shape( indices)[0];
  m = shape( indices)[1];
  res = with {
          ([0] <= [i] < [n]) {
            idx = indices[ i];
          } : to_string( haystack[ idx]) String::== needle ? idx : 0 * idx;
        } : modarray( indices);
  res = transpose( res);
  res = with {
          ([0] <= iv < [m])
            : sum( res[ iv]);
        } : genarray( [m], 0);
  return( res);
}
