module Char;

use ArrayBasics: {shape,sel};

export all;

#include "Templates.mac"

/******************************************************************************
 *
 * These functions test characters of being in a specific range.
 * E.g. in the range of digits, letters, or lower case letters.
 *
 ******************************************************************************/

external bool isalpha( char C);
  #pragma linksign[ 0, 1]
  #pragma linkobj "src/Char/ctype.o"
  #pragma linkname "SACisalpha"

external bool isupper( char C);
  #pragma linksign[ 0, 1]
  #pragma linkobj "src/Char/ctype.o"
  #pragma linkname "SACisupper"

external bool islower( char C);
  #pragma linksign[ 0, 1]
  #pragma linkobj "src/Char/ctype.o"
  #pragma linkname "SACislower"

external bool isdigit( char C);
  #pragma linksign[ 0, 1]
  #pragma linkobj "src/Char/ctype.o"
  #pragma linkname "SACisdigit"

external bool isxdigit (char C);
  #pragma linksign[ 0, 1]
  #pragma linkobj "src/Char/ctype.o"
  #pragma linkname "SACisxdigit"

external bool isspace( char C);
  #pragma linksign[ 0, 1]
  #pragma linkobj "src/Char/ctype.o"
  #pragma linkname "SACisspace"

external bool ispunct( char C);
  #pragma linksign[ 0, 1]
  #pragma linkobj "src/Char/ctype.o"
  #pragma linkname "SACispunct"

external bool isalnum( char C);
  #pragma linksign[ 0, 1]
  #pragma linkobj "src/Char/ctype.o"
  #pragma linkname "SACisalnum"

external bool isprint( char C);
  #pragma linksign[ 0, 1]
  #pragma linkobj "src/Char/ctype.o"
  #pragma linkname "SACisprint"

external bool isgraph( char C);
  #pragma linksign[ 0, 1]
  #pragma linkobj "src/Char/ctype.o"
  #pragma linkname "SACisgraph"

external bool iscntrl( char C);
  #pragma linksign[ 0, 1]
  #pragma linkobj "src/Char/ctype.o"
  #pragma linkname "SACiscntrl"

/******************************************************************************
 *
 * These functions test an integer value for being in the range of the ASCII
 * character set or convert an integer value into an ASCII character,
 * respectively.
 *
 ******************************************************************************/

external bool isascii( int N);
  #pragma linksign[ 0, 1]
  #pragma linkobj "src/Char/ctype.o"
  #pragma linkname "SACisascii"

external char toascii( int N);
  #pragma linksign[ 0, 1]
  #pragma linkobj "src/Char/ctype.o"
  #pragma linkname "SACtoascii"

/******************************************************************************
 *
 * These functions convert upper case letters into lower case letters
 * and vice versa.
 *
 ******************************************************************************/

external char tolower( char C);
  #pragma linksign[ 0, 1]
  #pragma linkobj "src/Char/ctype.o"
  #pragma linkname "SACtolower"

external char toupper( char C);
  #pragma linksign[ 0, 1]
  #pragma linkobj "src/Char/ctype.o"
  #pragma linkname "SACtoupper"

/******************************************************************************
 *
 * These functions convert numerical values into a char (byte) value.
 *
 ******************************************************************************/

#define TOCHAR_S( typ, postfix, zval, oval)                                    \
inline                                                                         \
char tochar( typ a)                                                            \
{                                                                              \
  res = _toc_S_( a);                                                           \
  return( res);                                                                \
}

#define TOCHAR_A( typ, postfix, zval, oval)                                    \
inline                                                                         \
char[n,d:shp] tochar( typ[n,d:shp] a)                                          \
{                                                                              \
  res = with {                                                                 \
          ( . <= iv <= . ) : _toc_S_( a[ iv]);                                 \
        } : genarray( shape( a), ' ');                                         \
  return( res);                                                                \
}

BUILT_IN( TOCHAR_S)
BUILT_IN( TOCHAR_A)
