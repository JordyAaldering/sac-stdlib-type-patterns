class Counter;

classtype int;

use ScalarArith: {+};

export all;

/******************************************************************************
 *
 * Creates a new counter with initial value 0.
 *
 ******************************************************************************/
Counter newCounter()
{
  return( to_Counter( 0));
}

/******************************************************************************
 *
 * Creates a new counter with initial value v.
 *
 ******************************************************************************/
Counter newCounter( int v)
{
  return( to_Counter( v));
}

/******************************************************************************
 *
 * Returns the current value of the counter
 *
 ******************************************************************************/
int valueOf( Counter &cnt)
{
  val = from_Counter( cnt);
  cnt = to_Counter( val);
  return( val);
}

/******************************************************************************
 *
 * Increments the counter by one.
 *
 ******************************************************************************/
void increment( Counter &cnt)
{
  val = from_Counter( cnt);
  cnt = to_Counter( val + 1);
}

/******************************************************************************
 *
 * Increments the counter by the given value.
 *
 ******************************************************************************/
void incrementBy( Counter &cnt, int x)
{
  val = from_Counter( cnt);
  cnt = to_Counter( val + x);
}

/******************************************************************************
 *
 * Returns the current value of the counter object and increments the counter.
 *
 ******************************************************************************/
int next( Counter &cnt)
{
  val = valueOf( cnt);
  increment( cnt);
  return( val);
}
