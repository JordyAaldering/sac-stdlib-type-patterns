class Random;

/******************************************************************************
 *
 * Class Random provides a non-linear additive feedback random number generator
 * employing a default table of size 31 long integers to return successive
 * pseudo-random numbers in the range from 0 to rand_max(). The period of this
 * random number generator is very large, approximately 16 * ((2 ** 31) - 1).
 *
 * This random number generator offers much better results than that of class
 * Rand, but is also about 2/3 slower.
 *
 ******************************************************************************/

external classtype;

#ifdef EXT_STDLIB
use Complex: all;
#endif /* ETX_STDLIB */

export all;

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

external objdef Random RandomGen;

external void srandom( uint SEED);
  #pragma effect Random::RandomGen
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<stdlib.h>"
#else
  #pragma linkobj "src/Random/Random.o"
#endif

/******************************************************************************
 *
 * Initialize RandomGen to produce a new sequence of pseudo-random numbers.
 *
 ******************************************************************************/

external long random();
  #pragma linksign [0]
  #pragma effect Random::RandomGen
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<stdlib.h>"
#else
  #pragma linkobj "src/Random/Random.o"
#endif


/******************************************************************************
 *
 * Use RandomGen to generate a new pseudo-random value in the range MIN to MAX.
 *
 ******************************************************************************/

external int random( int MIN, int MAX);
  #pragma linksign [0,1,2]
  #pragma effect Random::RandomGen
  #pragma linkname "SACrandom"
  #pragma linkobj "src/Random/Random.o"

external double random(double MIN, double MAX);
  #pragma linksign [0,1,2]
  #pragma effect Random::RandomGen
  #pragma linkname "SACdrandom"
  #pragma linkobj "src/Random/Random.o"


/******************************************************************************
 *
 * Use RandomGen to generate a new pseudo-random value in the range MIN to MAX.
 *
 ******************************************************************************/

#ifdef EXT_STDLIB

complex random( double rmin, double rmax, double imin, double imax)
{
  res = toc( random( rmin, rmax), random( imin, imax));
  return( res);
}

complex random(complex lb, complex rt)
{
  res = random( real( lb), real( rt), imag( lb), imag( rt));
  return( res);
}

complex prandom(double rmin, double rmax, double thetamin, double thetamax)
{
  res = polar( random( rmin, rmax), random( thetamin, thetamax));
  return( res);
}

complex prandom(complex lb, complex rt)
{
  rlb, tlb = ptod( lb);
  rrt, trt = ptod( rt);
  rmin = ScalarArith::min( rlb, rrt);
  rmax = ScalarArith::max( rlb, rrt);
  res = prandom ( rmin, rmax, trt, tlb);
  return( res);
}

#endif /* EXT_STDLIB */

int[n:shp] random( int[n] shp, int MIN, int MAX)
{
  res = with {
          (_mul_SxV_( 0, shp) <= iv < shp) : random( MIN, MAX);
        } : genarray( shp, 0);
  return( res);
}

double[n:shp] random( int[n] shp, double MIN, double MAX)
{
  res = with {
          (_mul_SxV_( 0, shp) <= iv < shp) : random( MIN, MAX);
        } : genarray( shp, 0d);
  return( res);
}
