/******************************************************************************
 *
 * WARNING: This module is untested and should be considered a work in progress.
 *
 ******************************************************************************/
module FixedPoint;

use SaCMath: {pow2};
import Array: {shape,sel};

export all;

#define TYPE( num) fixedpoint_##num

#define FORALL_POINTS( fun, ...)                                               \
fun(  8, ## __VA_ARGS__)                                                       \
fun( 16, ## __VA_ARGS__)                                                       \
fun( 24, ## __VA_ARGS__)                                                       \
fun( 32, ## __VA_ARGS__)

#define FORALL_POINTS2( fun, ...)                                              \
fun(  8, ## __VA_ARGS__)                                                       \
fun( 16, ## __VA_ARGS__)                                                       \
fun( 24, ## __VA_ARGS__)                                                       \
fun( 32, ## __VA_ARGS__)


/******************************************************************************
 *
 * Fixed point definitions.
 *
 ******************************************************************************/

#define TYPEDEF( num)                                                          \
typedef int TYPE( num);

FORALL_POINTS( TYPEDEF)


/******************************************************************************
 *
 * Macros for generating monadic operations.
 *
 ******************************************************************************/

#define ARRAY_MON( fun, zero, a, c)                                            \
inline                                                                         \
c[d:shp] fun( a[d:shp] A)                                                      \
{                                                                              \
  res = with {                                                                 \
          (_mul_SxV_( 0, shp) <= iv < shp)                                     \
            : fun( A[ iv]);                                                    \
        } : genarray( shp, zero);                                              \
  return( res);                                                                \
}


/******************************************************************************
 *
 * Macros for generating binary operations.
 *
 ******************************************************************************/

#define ARRAY_BIN_SxA( fun, zero, a, c)                                        \
inline                                                                         \
c[d:shp] fun( a A, a[d:shp] B)                                                 \
{                                                                              \
  res = with {                                                                 \
          (_mul_SxV_( 0, shp) <= iv < shp)                                     \
            : fun( A, B[ iv]);                                                 \
        } : genarray( shp, zero);                                              \
  return( res);                                                                \
}

#define ARRAY_BIN_AxS( fun, zero, a, c)                                        \
inline                                                                         \
c[d:shp] fun( a[d:shp] A, a B)                                                 \
{                                                                              \
  res = with {                                                                 \
          (_mul_SxV_( 0, shp) <= iv < shp)                                     \
            : fun( A[ iv], B);                                                 \
        } : genarray( shp, zero);                                              \
  return( res);                                                                \
}

#define ARRAY_BIN_AxA( fun, zero, a, c)                                        \
inline                                                                         \
c[d:shp] fun( a[d:shp] A, a[d:shp] B)                                          \
{                                                                              \
  res = with {                                                                 \
          (_mul_SxV_( 0, shp) <= iv < shp)                                     \
            : fun( A[ iv], B[ iv]);                                            \
        } : genarray( shp, zero);                                              \
  return( res);                                                                \
}

#define ARRAY_BIN( fun, zero, a, c)                                            \
ARRAY_BIN_SxA( fun, zero, a, c)                                                \
ARRAY_BIN_AxS( fun, zero, a, c)                                                \
ARRAY_BIN_AxA( fun, zero, a, c)


/******************************************************************************
 *
 * Fixed point conversions.
 *
 ******************************************************************************/

inline
int to_int( int a)
{
  return( a);
}

#define TO_INT( num)                                                           \
inline                                                                         \
int to_int( TYPE( num) a)                                                      \
{                                                                              \
  res = trunc( a);                                                             \
  return( res);                                                                \
}                                                                              \
ARRAY_MON( to_int, 0, TYPE( num), int)

#define TO_INT2( num)                                                          \
inline                                                                         \
int[2] to_int2( TYPE( num) a)                                                  \
{                                                                              \
  whole = (int)a;                                                              \
  part = _mod_SxS_( (int)a, pow2( num));                                       \
  return( [whole, part]);                                                      \
}                                                                              \
ARRAY_MON( to_int2, ([0,0]), TYPE( num), int)

#define TO_TYPE( num, from)                                                    \
inline                                                                         \
TYPE( num) to_fixedpoint_##num( from a)                                        \
{                                                                              \
  v = _mul_SxS_( to_int( a), pow2( num));                                      \
  res = (TYPE( num))v;                                                         \
  return( res);                                                                \
}                                                                              \
ARRAY_MON( to_fixedpoint_##num, (TYPE( num))0, from, TYPE( num))

FORALL_POINTS( TO_INT)
FORALL_POINTS( TO_INT2)
FORALL_POINTS( TO_TYPE, int)


/******************************************************************************
 *
 * Fixed point properties.
 *
 ******************************************************************************/

#define DIM( num)                                                              \
inline                                                                         \
int dim( TYPE( num)[*] a)                                                      \
{                                                                              \
  res = _dim_A_( (int[*])a);                                                   \
  return( res);                                                                \
}

#define SHAPE( num)                                                            \
inline                                                                         \
int[.] shape( TYPE( num)[*] a)                                                 \
{                                                                              \
  res = _shape_A_( (int[*])a);                                                 \
  return( res);                                                                \
}

#define SEL( num)                                                              \
inline                                                                         \
TYPE( num) sel( int[.] idx, TYPE( num)[*] a)                                   \
{                                                                              \
  v = _sel_VxA_( idx, (int[*])a);                                              \
  res = (TYPE( num))v;                                                         \
  return( res);                                                                \
}

FORALL_POINTS( DIM)
FORALL_POINTS( SHAPE)
FORALL_POINTS( SEL)


/******************************************************************************
 *
 * Unary operations on fixed points.
 *
 ******************************************************************************/

#define CEIL( num)                                                             \
inline                                                                         \
int ceil( TYPE( num) a)                                                        \
{                                                                              \
  v = a + to_fixedpoint_##num( 1) / to_fixedpoint_##num( 2);                   \
  res = trunc( v);                                                             \
  return( res);                                                                \
}                                                                              \
ARRAY_MON( ceil, 0, TYPE( num), int)

#define FLOOR( num)                                                            \
inline                                                                         \
int floor( TYPE( num) a)                                                       \
{                                                                              \
  v = a - to_fixedpoint_##num( 1) / to_fixedpoint_##num( 2);                   \
  res = trunc( v);                                                             \
  return( res);                                                                \
}                                                                              \
ARRAY_MON( floor, 0, TYPE( num), int)

#define TRUNC( num)                                                            \
inline                                                                         \
int trunc( TYPE( num) a)                                                       \
{                                                                              \
  res = _div_SxS_( (int)a, pow2( num));                                        \
  return( res);                                                                \
}                                                                              \
ARRAY_MON( trunc, 0, TYPE( num), int)

#define FRACTION( num)                                                         \
inline                                                                         \
int fraction( TYPE( num) a)                                                    \
{                                                                              \
  res = pow2( num);                                                            \
  return( res);                                                                \
}

FORALL_POINTS( CEIL)
FORALL_POINTS( FLOOR)
FORALL_POINTS( TRUNC)
FORALL_POINTS( FRACTION)


/******************************************************************************
 *
 * Binary operations on fixed points.
 *
 ******************************************************************************/

#define ADD( num)                                                              \
inline                                                                         \
TYPE( num) +( TYPE( num) a, TYPE( num) b)                                      \
{                                                                              \
  v = _add_SxS_( (int)a, (int)b);                                              \
  res = (TYPE( num))v;                                                         \
  return( res);                                                                \
}                                                                              \
ARRAY_BIN( +, (TYPE( num))0, TYPE( num), TYPE( num))

#define SUB( num)                                                              \
inline                                                                         \
TYPE( num) -( TYPE( num) a, TYPE( num) b)                                      \
{                                                                              \
  v = _sub_SxS_( (int)a, (int)b);                                              \
  res = (TYPE( num))v;                                                         \
  return( res);                                                                \
}                                                                              \
ARRAY_BIN( -, (TYPE( num))0, TYPE( num), TYPE( num))

#define DIV( num)                                                              \
inline                                                                         \
TYPE( num) /( TYPE( num) a, TYPE( num) b)                                      \
{                                                                              \
  unnorm = _mul_SxS_( (int)a, pow2( num));                                     \
  v = _div_SxS_( unnorm, (int)b);                                              \
  res = (TYPE( num))v;                                                         \
  return( res);                                                                \
}                                                                              \
ARRAY_BIN( /, (TYPE( num))0, TYPE( num), TYPE( num))

#define MUL( num)                                                              \
inline                                                                         \
TYPE( num) *( TYPE( num) a, TYPE( num) b)                                      \
{                                                                              \
  unnorm = _mul_SxS_( (int)a, (int)b);                                         \
  v = _div_SxS_( unnorm, pow2( num));                                          \
  res = (TYPE( num))v;                                                         \
  return( res);                                                                \
}                                                                              \
ARRAY_BIN( *, (TYPE( num))0, TYPE( num), TYPE( num))

#define COMP( num, sim, name)                                                  \
inline                                                                         \
bool sim( TYPE( num) a, TYPE( num) b)                                          \
{                                                                              \
  res = _ ## name ## _SxS_( (int)a, (int)b);                                   \
  return( res);                                                                \
}                                                                              \
ARRAY_BIN( sim, false, TYPE( num), bool)

FORALL_POINTS( ADD)
FORALL_POINTS( SUB)
FORALL_POINTS( DIV)
FORALL_POINTS( MUL)

FORALL_POINTS( COMP, <, lt)
FORALL_POINTS( COMP, >, gt)
FORALL_POINTS( COMP, <=, le)
FORALL_POINTS( COMP, >=, ge)
FORALL_POINTS( COMP, ==, eq)

#define CROSS_PRODUCT( num)                                                    \
FORALL_POINTS2( TO_TYPE, TYPE( num))
FORALL_POINTS( CROSS_PRODUCT)


/******************************************************************************
 *
 * Binary search.
 *
 ******************************************************************************/

#define BINARY_SEARCH( num, name, function)                                    \
inline                                                                         \
TYPE( num) name( TYPE( num) arg)                                               \
{                                                                              \
  res = (TYPE(num)) 1;                                                         \
  two = to_fixedpoint_##num(2);                                                \
  i=0;                                                                         \
                                                                               \
  /* Find the largest power of 2 a such that a^2 < arg */                      \
  if ( function( res) < arg){                                                  \
    do {                                                                       \
      res *= two;                                                              \
      i = _add_SxS_( i, 1);                                                    \
    } while ( function( res) < arg);                                           \
  }                                                                            \
                                                                               \
  delta = res / two;                                                           \
                                                                               \
  while ( _gt_SxS_( i, 0)){                                                    \
    i = _add_SxS_( i, 1);                                                      \
    if ( function( ( res + delta)) < arg){                                     \
      res += delta;                                                            \
      delta /= two;                                                            \
    }                                                                          \
  }                                                                            \
  return( res);                                                                \
}                                                                              \
ARRAY_MON( name, (TYPE( num))0, TYPE( num), TYPE( num))

#define SQ( a) a * a
#define CB( a) a * a * a
FORALL_POINTS( BINARY_SEARCH, sqrt, SQ)
FORALL_POINTS( BINARY_SEARCH, cbrt, CB)
