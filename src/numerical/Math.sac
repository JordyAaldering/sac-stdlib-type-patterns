module Math;

use ScalarArith: all;
export all;

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

/******************************************************************************
 *
 * Trigonometric functions.
 *
 ******************************************************************************/

external double cos( double x);
  #pragma linksign[ 0,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif
#ifdef NEED_LIBM
  #pragma linkwith "m"
#endif

external double sin( double x);
  #pragma linksign[ 0,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external double tan( double x);
  #pragma linksign[ 0,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external double acos( double x);
  #pragma linksign[ 0,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external double asin( double x);
  #pragma linksign[ 0,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external double atan( double x);
  #pragma linksign[ 0,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external double atan2( double x, double y);
  #pragma linksign[ 0,1,2]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif


/******************************************************************************
 *
 * Hyperbolic functions.
 *
 ******************************************************************************/

external double cosh( double x);
  #pragma linksign[ 0,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external double sinh( double x);
  #pragma linksign[ 0,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external double tanh( double x);
  #pragma linksign[ 0,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external double acosh( double x);
  #pragma linksign[ 0,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external double asinh( double x);
  #pragma linksign[ 0,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external double atanh( double x);
  #pragma linksign[ 0,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif


/******************************************************************************
 *
 * Exponential and logarithmic functions.
 *
 ******************************************************************************/

external double exp( double x);
  #pragma linksign[ 0,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external float expf( float x);
  #pragma linksign[ 0,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external double, int frexp( double x);
  #pragma linksign[ 0,2,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external double ldexp( double x, int EXP);
  #pragma linksign[ 0,1,2]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external double log( double x);
  #pragma linksign[ 0,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external double log10( double x);
  #pragma linksign[ 0,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external double log2( double x);
  #pragma linksign[ 0,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external double expm1( double x);
  #pragma linksign[ 0,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external double log1p( double x);
  #pragma linksign[ 0,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external double, double modf( double x);
  #pragma linksign[ 0,2,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif


/******************************************************************************
 *
 * Power functions.
 *
 ******************************************************************************/

external double pow( double x, double y);
  #pragma linksign[ 0,1,2]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external float powf( float x, float y);
  #pragma linksign[ 0,1,2]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external double sqrt( double x);
  #pragma linksign[ 0,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external float sqrtf( float x);
  #pragma linksign[ 0,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external double cbrt( double x);
  #pragma linksign[ 0,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif


/******************************************************************************
 *
 * Nearest integer, absolute value, and remainder functions.
 *
 ******************************************************************************/

external double ceil( double x);
  #pragma linksign[ 0,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external double fabs( double x);
  #pragma linksign[ 0,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external double floor( double x);
  #pragma linksign[ 0,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external double fmod( double x, double y);
  #pragma linksign[ 0,1,2]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif


/******************************************************************************
 *
 * Range testing functions.
 *
 ******************************************************************************/

/* Check x for infinity */
external bool isinf( double x);
  #pragma linksign[ 0,1]
  #pragma linkobj "src/Math/isinf.o"
  #pragma linkname "SAC_MATH_isinf"

/* Check x for being NaN */
external bool isnan( double x);
  #pragma linksign[ 0,1]
  #pragma linkobj "src/Math/isnan.o"
  #pragma linkname "SAC_MATH_isnan"

external bool finite( double x);
  #pragma linksign[ 0,1]
  #pragma linkobj "src/Math/isfinite.o"
  #pragma linkname "SAC_MATH_isfinite"


/******************************************************************************
 *
 * Miscellaneous.
 *
 ******************************************************************************/

external double copysign( double x, double y);
  #pragma linksign[ 0,1,2]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external double rint( double x);
  #pragma linksign[ 0,1]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif

external double hypot( double x, double y);
  #pragma linksign[ 0,1,2]
#ifdef HAVE_HEADER_PRAGMA
  #pragma header "<math.h>"
#endif


/******************************************************************************
 *
 * Trigonometric functions.
 *
 ******************************************************************************/

inline
float cos( float x)
{
  res = tof( cos( tod( x)));
  return( res);
}

inline
float sin( float x)
{
  res = tof( sin( tod( x)));
  return( res);
}

inline
float, float sincos( float x)
{
  s = sin( x);
  c = cos( x);
  return( s, c);
}

inline
double, double sincos( double x)
{
  s = sin( x);
  c = cos( x);
  return( s, c);
}

inline
float tan( float x)
{
  /* Tangent of x */
  res = tof( tan( tod( x)));
  return( res);
}

inline
float acos( float x)
{
  /* Arc cosine of x */
  res = tof( acos( tod( x)));
  return( res);
}

inline
float asin( float x)
{
  /* Arc sine of x */
  res = tof( asin( tod( x)));
  return( res);
}

inline
float atan( float x)
{
  /* Arc tangent of x */
  res = tof( atan( tod( x)));
  return( res);
}

inline
float atan2( float x, float y)
{
  /* Arc tangent of y/x */
  res = tof( atan2( tod( x), tod( y)));
  return( res);
}


/******************************************************************************
 *
 * Hyberbolic functions.
 *
 ******************************************************************************/

inline
float cosh( float x)
{
  /* Hyperbolic cosine of x */
  res = tof( cosh( tod( x)));
  return( res);
}

inline
float sinh( float x)
{
  /* Hyperbolic sine of x */
  res = tof( sinh( tod( x)));
  return( res);
}

inline
float tanh( float x)
{
  /* Hyperbolic tangent of x */
  res = tof( tanh( tod( x)));
  return( res);
}

inline
float acosh( float x)
{
  /* Hyperbolic arc cosine of x */
  res = tof( acosh( tod( x)));
  return( res);
}

inline
float asinh( float x)
{
  /* Hyperbolic arc sine of x */
  res = tof( asinh( tod( x)));
  return( res);
}

inline
float atanh( float x)
{
  /* Hyperbolic arc tangent of x */
  res = tof( atanh( tod( x)));
  return( res);
}


/******************************************************************************
 *
 * Exponential and logarithmic functions.
 *
 ******************************************************************************/

inline
float exp( float x)
{
  /* Exponentional of x */
  res = expf( x);
  return( res);
}

inline
float, int frexp( float x)
{
  /* Break x into a normalized fraction and an integral power of 2 */
  a, b = frexp( tod( x));
  a = tof( a);
  return( a, b);
}

inline
float ldexp( float x, int exp)
{
  /* x times (two to the EXP power)  */
  res = tof( ldexp( tod( x), exp));
  return(res);
}

inline
float log( float x)
{
  /* Natural logarithm of x */
  res = tof( log( tod( x)));
  return( res);
}

inline
float log10( float x)
{
  /* Base-ten logarithm of x */
  res = tof( log10( tod( x)));
  return( res);
}

inline
float log2( float x)
{
  /* Base-two logarithm of x */
  res = tof( log2( tod( x)));
  return( res);
}

inline
float expm1( float x)
{
  /* exp(x) - 1 */
  res = tof( expm1( tod( x)));
  return( res);
}

inline
float log1p( float x)
{
  /* log(1 + x) */
  res = tof( log1p( tod( x)));
  return( res);
}

inline
float, float modf( float x)
{
  /* Break x into integral and fractional parts */
  a, b = modf( tod( x));
  a = tof( a);
  b = tof( b);
  return( a, b);
}


/******************************************************************************
 *
 * Power functions.
 *
 ******************************************************************************/

inline
float pow( float x, float y)
{
  res = powf( x, y);
  return( res);
}

inline
float sqrt( float x)
{
  res = sqrtf( x);
  return( res);
}

inline
float cbrt( float x)
{
  /* Cube root of x */
  res = tof( cbrt( tod( x)));
  return( res);
}


/******************************************************************************
 *
 * Nearest integer, absolute value, and remainder functions.
 *
 ******************************************************************************/

inline
float ceil( float x)
{
  /* Smallest integral value not less than x */
  res = tof( ceil( tod( x)));
  return( res);
}

inline
float fabs( float x)
{
  /* Absolute value of x */
  res = tof( fabs( tod( x)));
  return( res);
}

inline
float floor( float x)
{
  /* Largest integer not greater than x */
  res = tof( floor( tod( x)));
  return( res);
}

inline
float fmod( float x, float y)
{
  /* Floating-point modulo remainder of x/y */
  res = tof( fmod( tod( x), tod( y)));
  return( res);
}


/******************************************************************************
 *
 * Miscellaneous.
 *
 ******************************************************************************/

inline
float copysign( float x, float y)
{
  /* x with its signed changed to y's */
  res = tof( copysign( tod( x), tod( y)));
  return( res);
}

inline
float rint( float x)
{
  /* The integer nearest x in the direction of the prevailing rounding mode */
  res = tof( rint( tod( x)));
  return( res);
}

inline
float hypot( float x, float y)
{
  /* sqrt(x*x + y*y) */
  res = tof( hypot( tod( x), tod( y)));
  return( res);
}

inline
int sign( float x)
{
  res = x < 0f ? -1 : (x > 0f ? 1 : 0);
  return(res);
}

inline
int sign( double x)
{
  res = x < 0d ? -1 : (x > 0d ? 1 : 0);
  return(res);
}


/******************************************************************************
 *
 * Numerical constants.
 *
 ******************************************************************************/

inline
float fl_e()
{
  return( 2.71828182845904523540f); /* e */
}

inline
float fl_log2e()
{
  return( 1.44269504088896340740f); /* log(2e) */
}

inline
float fl_log10e()
{
  return( 0.43429448190325182765f);	/* log(10e) */
}

inline
float fl_ln2()
{
  return( 0.69314718055994530942f);	/* log(e2) */
}

inline
float fl_ln10()
{
  return( 2.30258509299404568402f);	/* log(e10) */
}

inline
float fl_pi()
{
  return( 3.14159265358979323846f);	/* pi */
}

inline
float fl_pi_2()
{
  return( 1.57079632679489661923f);	/* pi/2 */
}

inline
float fl_pi_rec()
{
  return( 0.31830988618379067154f);	/* 1/pi */
}

inline
float fl_pi_4()
{
  return( 0.78539816339744830962f);	/* pi/4 */
}

inline
float fl_pi_rec_2()
{
  return( 0.63661977236758134308f);	/* 2/pi */
}

inline
float fl_sqrtpi_rec_2()
{
  return( 1.12837916709551257390f);	/* 2/sqrt(pi) */
}

inline
float fl_sqrt2()
{
  return( 1.41421356237309504880f);	/* sqrt(2) */
}

inline
float fl_sqrt2_rec()
{
  return( 0.70710678118654752440f); /* 1/sqrt(2) */
}

inline
double e()
{
  return( 2.71828182845904523540d); /* e */
}

inline
double log2e()
{
  return( 1.44269504088896340740d); /* log(2e) */
}

inline
double log10e()
{
  return( 0.43429448190325182765d);	/* log(10e) */
}

inline
double ln2()
{
  return( 0.69314718055994530942d);	/* log(e2) */
}

inline
double ln10()
{
  return( 2.30258509299404568402d);	/* log(e10) */
}

inline
double pi()
{
  return( 3.14159265358979323846d);	/* pi */
}

inline
double pi_2()
{
  return( 1.57079632679489661923d); /* pi/2 */
}

inline
double pi_rec()
{
  return( 0.31830988618379067154d); /* 1/pi */
}

inline
double pi_4()
{
  return( 0.78539816339744830962d); /* pi/4 */
}

inline
double pi_rec_2()
{
  return( 0.63661977236758134308d); /* 2/pi */
}

inline
double sqrtpi_rec_2()
{
  return( 1.12837916709551257390d); /* 2/sqrt(pi) */
}

inline
double sqrt2()
{
  return( 1.41421356237309504880d); /* sqrt(2) */
}

inline
double sqrt2_rec()
{
  return( 0.70710678118654752440d); /* 1/sqrt(2) */
}
