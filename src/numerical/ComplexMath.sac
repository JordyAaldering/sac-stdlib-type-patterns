module ComplexMath;

#define OVERLOADS +,-,*,/
use Complex: all except {OVERLOADS};
import Complex: {OVERLOADS};
import Array: {OVERLOADS};

export all;

/******************************************************************************
 *
 * The following function definitions are based on:
 * Bronstein/Semendjajew: Taschenbuch der Mathematik, page 512ff.
 *
 ******************************************************************************/

/******************************************************************************
 *
 * Trigonometric functions on complex numbers.
 *
 ******************************************************************************/

inline
complex sin( complex c)
{
  r, i = tod( c);
  r2 = Math::sin( r) * Math::cosh( i);
  i2 = Math::cos( r) * Math::sinh( i);
  c = toc( r2, i2);
  return( c);
}

inline
complex cos( complex c)
{
  r, i = tod( c);
  r2 = Math::cos( r) * Math::cosh( i);
  i2 = -1d * Math::sin( r) * Math::sinh( i);
  c = toc( r2, i2);
  return( c);
}

inline
complex tan( complex c)
{
  r, i = tod( c);
  z = Math::cos( 2d * r) + Math::cosh( 2d * i);
  r2 = Math::sin( 2d * r) / z;
  i2 = Math::sinh( 2d * i) / z;
  c = toc( r2, i2);
  return( c);
}

inline
complex asin( complex c)
{
  c = toc( -1d) * i() * log( i() * c + sqrt( toc( 1d) - c * c));
  return( c);
}

inline
complex acos( complex c)
{
  c = toc( -1d) * i() * log( c + sqrt( c * c - toc( 1d)));
  return( c);
}

inline
complex atan( complex c)
{
  one = toc( 1d);
  a = one / (toc( 2d) * i());
  b = (one + i() * c) / (one - i() * c);
  c = a * log( b);
  return( c);
}

/******************************************************************************
 *
 * Hyperbolic functions on complex numbers.
 *
 ******************************************************************************/

inline
complex sinh( complex c)
{
  r, i = tod( c);
  r2 = Math::sinh( r) * Math::cos( i);
  i2 = Math::cosh( r) * Math::sin( i);
  c = toc( r2, i2);
  return( c);
}

inline
complex cosh( complex c)
{
  r, i = tod( c);
  r2 = Math::cosh( r) * Math::cos( i);
  i2 = Math::sinh( r) * Math::sin( i);
  c = toc( r2, i2);
  return( c);
}

inline
complex tanh( complex c)
{
  c = sinh( c) / cosh( c);
  return( c);
}

inline
complex asinh( complex c)
{
  c = log( c + sqrt( c * c + toc( 1d)));
  return( c);
}

inline
complex acosh( complex c)
{
  c = log( c + sqrt( c * c - toc( 1d)));
  return( c);
}

inline
complex atanh( complex c)
{
  one = toc( 1d);
  c = toc( 0.5d) * log( (one + c) / (one - c));
  return( c);
}

/******************************************************************************
 *
 * Exponential and logarithmic functions on complex numbers.
 *
 ******************************************************************************/

inline
complex exp( complex c)
{
  r, i = tod( c);
  r2 = Math::exp( r) * Math::cos( i);
  i2 = Math::exp( r) * Math::sin( i);
  c = toc( r2, i2);
  return( c);
}

inline
complex log( complex c)
{
  r, i = tod( c);
  r2 = 0.5d * Math::log( r * r + i * i);
  i2 = Math::atan( i / r);
  c = toc( r2, i2);
  return( c);
}

/******************************************************************************
 *
 * Power functions on complex numbers.
 *
 ******************************************************************************/

inline
complex pow( complex base, complex expon)
{
  c = exp( expon * log( base));
  return( c);
}

inline
complex pow( complex base, double  expon)
{
  c = exp( toc( expon) * log( base));
  return( c);
}

inline
complex pow( double  base, complex expon)
{
  c = exp( expon * toc( Math::log( base)));
  return( c);
}

inline
complex sqrt( complex c)
{
  r, i = tod( c);
  z = Math::sqrt( r * r + i * i);
  r2 = Math::sqrt( 0.5d * (z + r));
  i2 = Math::sqrt( 0.5d * (z - r));
  c = toc( r2, i2);
  return( c);
}
