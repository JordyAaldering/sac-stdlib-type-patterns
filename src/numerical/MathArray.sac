module MathArray;

use ScalarArith: { zero };
import Math: all;

export all;

/******************************************************************************
 *
 * This module exports the following functions:
 *
 * float[+] exp( float[+] A);
 * double[+] exp( double[+] A);
 *
 * float[+] log( float[+] A);
 * double[+] log( double[+] A);
 *
 * float[+] log10( float[+] A);
 * double[+] log10( double[+] A);
 *
 * float[+] fabs( float[+] A);
 * double[+] fabs( double[+] A);
 *
 * float[+] sqrt( float[+] A);
 * double[+] sqrt( double[+] A);
 *
 * float[+] pow( float[+] A, float e);
 * double[+] pow( double[+] A, double e);
 *
 * float[+] floor( float[+] A);
 * double[+] floor( double[+] A);
 *
 ******************************************************************************/

/******************************************************************************
 *
 * Definition of code templates.
 *
 ******************************************************************************/

#define MAP_UNA_A(op, argtype, restype)                                        \
inline                                                                         \
restype[d:shp] op( argtype[d:shp] A)                                           \
{                                                                              \
  res = with {                                                                 \
          (_mul_SxV_( 0, shp) <= iv < shp)                                     \
            : op( _sel_VxA_( iv, A));                                          \
        } : genarray( shp, zero( A));                                          \
  return( res);                                                                \
}

#define MAP_BIN_AxS(op, argtype, restype)                                      \
inline                                                                         \
restype[d:shp] op( argtype[d:shp] A, argtype S)                                \
{                                                                              \
  res = with {                                                                 \
          (_mul_SxV_( 0, shp) <= iv < shp)                                     \
            : op( _sel_VxA_( iv, A), S);                                       \
        } : genarray( shp, zero( A));                                          \
  return( res);                                                                \
}


/******************************************************************************
 *
 * Definition of meta templates.
 *
 ******************************************************************************/

#define ALL_TYPES( template, arg1)                                             \
template( arg1, float, float)                                                  \
template( arg1, double, double)


/******************************************************************************
 *
 * Definition of SAC standard module MathArray.
 *
 ******************************************************************************/

ALL_TYPES( MAP_UNA_A, log)
ALL_TYPES( MAP_UNA_A, log2)
ALL_TYPES( MAP_UNA_A, log10)
ALL_TYPES( MAP_UNA_A, exp)
ALL_TYPES( MAP_UNA_A, fabs)
ALL_TYPES( MAP_UNA_A, sqrt)
ALL_TYPES( MAP_UNA_A, floor)

ALL_TYPES( MAP_BIN_AxS, pow)
