#include "Templates.mac"

/******************************************************************************
 *
 * Array-Extensions for binary monary ops
 *
 * Calls of these are created when using the macros provided in "Templates.mac"
 * such as MAP_ARI_OPS, MAP_INT_OPS, MAP_REL_OPS...
 *
 ******************************************************************************/

#define MAP_BIN_SxA( name, op, a, b)                                           \
inline                                                                         \
b[d:shp] name( a A, a[d:shp] B)                                                \
{                                                                              \
  res = with {                                                                 \
          (_mul_SxV_( 0, shp) <= iv < shp)                                     \
            : name( A, B[ iv]);                                                \
        } : genarray( shp, name( one( A), one( B)));                           \
  return( res);                                                                \
}

#define MAP_BIN_AxS( name, op, a, b)                                           \
inline                                                                         \
b[d:shp] name( a[d:shp] A, a B)                                                \
{                                                                              \
  res = with {                                                                 \
          (_mul_SxV_( 0, shp) <= iv < shp)                                     \
            : name( A[ iv], B);                                                \
        } : genarray( shp, name( one( A), one( B)));                           \
  return( res);                                                                \
}

#define MAP_BIN_AxA( name, op, a, b)                                           \
inline                                                                         \
b[d:shp] name( a[d:shp] A, a[d:shp] B)                                         \
{                                                                              \
  res = with {                                                                 \
          (_mul_SxV_( 0, shp) <= iv < shp)                                     \
            : name( A[ iv], B[ iv]);                                           \
        } : genarray( shp, name( one( A), one( B)));                           \
  return( res);                                                                \
}

/******************************************************************************
 *
 * Array-Extensions for monadic ops
 *
 ******************************************************************************/

#define MAP_MON_SxA( name, op, a, b)

#define MAP_MON_AxS( name, op, a, b)

#define MAP_MON_AxA( name, op, a, b)                                           \
inline                                                                         \
b[d:shp] name( a[d:shp] A)                                                     \
{                                                                              \
  res = with {                                                                 \
          (_mul_SxV_( 0, shp) <= iv < shp)                                     \
            : name( A[ iv]);                                                   \
        } : genarray( shp, name( zero( A)));                                   \
  return( res);                                                                \
}


/******************************************************************************
 *
 * AriOPS on arrays (see Templates.mac for details)
 *
 ******************************************************************************/

#define ARI_OPS_A( a)                                                          \
MAP_ARI_OPS( SxA, a)                                                           \
MAP_ARI_OPS( AxS, a)                                                           \
MAP_ARI_OPS( AxA, a)


/******************************************************************************
 *
 * RelOPS on arrays (see Templates.mac for details)
 *
 ******************************************************************************/

#define REL_OPS_A( a)                                                          \
EQ_OPS_A( a)                                                                   \
COMP_OPS_A( a)

#define EQ_OPS_A( a)                                                           \
MAP_EQ_OPS( SxA, a)                                                            \
MAP_EQ_OPS( AxS, a)                                                            \
MAP_EQ_OPS( AxA, a)

#define COMP_OPS_A( a)                                                         \
MAP_COMP_OPS( SxA, a)                                                          \
MAP_COMP_OPS( AxS, a)                                                          \
MAP_COMP_OPS( AxA, a)


/******************************************************************************
 *
 * Structural OPS
 *
 ******************************************************************************/

#define TAKE( a)                                                               \
inline                                                                         \
a[*] take( int[vlen] v, a[vlen:shp,d:shp] A)                                   \
{                                                                              \
  vext = _cat_VxV_( v, shp);                                                   \
  start = ArrayTransform::where( _lt_VxS_( vext, 0),                           \
            _max_VxS_( _sub_SxV_( 0, _add_VxV_( shape( A), vext)), 0), 0);     \
  stop = ArrayTransform::where( _lt_VxS_( vext, 0),                            \
            _abs_V_( vext), _min_VxV_( _abs_V_( vext), shape( A)));            \
  offset = ArrayTransform::where( _lt_VxS_( vext, 0),                          \
            _add_VxV_( shape( A), vext), 0);                                   \
  res = with {                                                                 \
          (start <= iv < stop)                                                 \
            : A[ _add_VxV_( offset, iv)];                                      \
        } : genarray( _abs_V_( vext), zero( A));                               \
  return( res);                                                                \
}

/*----------------------------------------------------------------------------*/

#define DROP( a)                                                               \
inline                                                                         \
a[*] drop( int[vlen] v, a[vlen:vshp,d:shp] A)                                  \
{                                                                              \
  vext = _cat_VxV_( v, ArrayBasics::genarray( [d], 0));                        \
  new_shp = _sub_VxV_( shape( A), _abs_V_( vext));                             \
  new_shp = ArrayTransform::where( _lt_VxS_( new_shp, 0), 0, new_shp);         \
  offset = ArrayTransform::where( _lt_VxS_( vext, 0), 0, vext);                \
  offset = ArrayTransform::where( _lt_VxV_( offset, shape( A)), offset, 0);    \
  res = with {                                                                 \
          (_mul_SxV_( 0, new_shp) <= iv < new_shp)                             \
            : A[ _add_VxV_( offset, iv)];                                      \
        } : genarray( new_shp, zero( A));                                      \
  return( res);                                                                \
}

/*----------------------------------------------------------------------------*/

#define TILE_VxVxA( a)                                                         \
inline                                                                         \
a[*] tile( int[.] shp, int[.] idx, a[*] A)                                     \
{                                                                              \
  res = with {                                                                 \
          (_mul_SxV_( 0, shp) <= iv < shp)                                     \
            : A[ _add_VxV_( idx, iv)];                                         \
        } : genarray( shp, zero( A));                                          \
  return( res);                                                                \
}

#define TILE( a)                                                               \
TILE_VxVxA( a)

/*----------------------------------------------------------------------------*/

#define CAT_AxA( a)                                                            \
inline                                                                         \
a[o,d:shp] ++( a[n,d:shp] A, a[m,d:shp] B)                                     \
{                                                                              \
  o = _add_SxS_( n, m);                                                        \
  new_shp = _cat_VxV_( [o], shp);                                              \
  offset = _cat_VxV_( [n], _mul_SxV_( 0, shp));                                \
  res = with {                                                                 \
          (_mul_SxV_( 0, new_shp) <= iv < shape( A))                           \
            : A[ iv];                                                          \
        } : genarray( new_shp, zero( A));                                      \
  res = with {                                                                 \
          (offset <= iv < new_shp)                                             \
            : B[ _sub_VxV_( iv, offset)];                                      \
        } : modarray( res);                                                    \
  return( res);                                                                \
}

#define CAT( a)                                                                \
CAT_AxA( a)


/*----------------------------------------------------------------------------*/

#define REVERSE_A( a)                                                          \
inline                                                                         \
a[n,d:shp] reverse( a[n,d:shp] A)                                              \
{                                                                              \
  maxidx0 = _sub_SxS_( n, 1);                                                  \
  res = with {                                                                 \
          ([0] <= [i] <= [maxidx0])                                            \
            : A[ _sub_SxS_( maxidx0, i)];                                      \
        } : modarray( A);                                                      \
  return( res);                                                                \
}

#define REVERSE( a)                                                            \
REVERSE_A( a)

/*----------------------------------------------------------------------------*/

#define SHIFT_SxSxSxA( a)                                                      \
inline                                                                         \
a[d:shp] shift( int dimension, int count, a boundary, a[d:shp] A)              \
{                                                                              \
  res = A;                                                                     \
  if (_neq_SxS_( count, 0)) {                                                  \
    max_shift = _sel_VxA_( [dimension], shp);                                  \
    if (_gt_SxS_( count, 0)) {                                                 \
      count = _min_SxS_( count, max_shift);                                    \
      offset = _modarray_AxVxS_( _mul_SxV_( 0, shp), [dimension], count);      \
      lb = offset;                                                             \
      ub = shp;                                                                \
    } else {                                                                   \
      count = _max_SxS_( count, _neg_S_( max_shift));                          \
      offset = _modarray_AxVxS_( _mul_SxV_( 0, shp), [dimension], count);      \
      lb = _mul_SxV_( 0, shp);                                                 \
      ub = _add_VxV_( shp, offset);                                            \
    }                                                                          \
    res = with {                                                               \
            (_mul_SxV_( 0, shp) <= iv < shp)                                   \
              : boundary;                                                      \
          } : genarray( shp, zero( A));                                        \
    res = with {                                                               \
            (lb <= iv < ub)                                                    \
              : A[ _sub_VxV_( iv, offset)];                                    \
          } : modarray( res);                                                  \
  }                                                                            \
  return( res);                                                                \
}

#define SHIFT_VxSxA( a)                                                        \
inline                                                                         \
a[d:shp] shift( int[vlen] counts, a boundary, a[d:shp] A)                      \
{                                                                              \
  for (i = 0; _lt_SxS_( i, vlen); i = _add_SxS_( i, 1)) {                      \
    offset = _sel_VxA_( [i], counts);                                          \
    A = shift( i, offset, boundary, A);                                        \
  }                                                                            \
  return( A);                                                                  \
}

#define SHIFT_VxA( a)                                                          \
inline                                                                         \
a[d:shp] shift( int[.] counts, a[d:shp] A)                                     \
{                                                                              \
  res = shift( counts, zero( A), A);                                           \
  return( res);                                                                \
}

#define SHIFT( a)                                                              \
SHIFT_SxSxSxA( a)                                                              \
SHIFT_VxSxA( a)                                                                \
SHIFT_VxA( a)

/*----------------------------------------------------------------------------*/

#define ROTATE_SxSxA( a)                                                       \
inline                                                                         \
a[d:shp] rotate( int dimension, int count, a[d:shp] A)                         \
{                                                                              \
  res = A;                                                                     \
  if (_neq_SxS_( count, 0)) {                                                  \
    max_rotate = _sel_VxA_( [dimension], shp);                                 \
    if (_neq_SxS_( max_rotate, 0)) {                                           \
      count = _mod_SxS_( count, max_rotate);                                   \
      if (_lt_SxS_( count, 0)) {                                               \
        count = _add_SxS_( count, max_rotate);                                 \
      }                                                                        \
      offset = _modarray_AxVxS_(_mul_SxV_( 0, shp),[dimension],count);         \
      slice_shp = _modarray_AxVxS_(shp, [dimension], count);                   \
      res = with {                                                             \
              (offset <= iv < shp)                                             \
                : A[ _sub_VxV_( iv, offset)];                                  \
            } : modarray( A);                                                  \
      res = with {                                                             \
              (_mul_SxV_( 0, shape( res)) <= iv < slice_shp)                   \
                : A[ _add_VxV_( _sub_VxV_( shp, slice_shp), iv)];              \
            } : modarray( res);                                                \
    }                                                                          \
  }                                                                            \
  return( res);                                                                \
}

#define ROTATE_VxA( a)                                                         \
inline                                                                         \
a[d:shp] rotate( int[vlen] counts,  a[d:shp] A)                                \
{                                                                              \
  for (i = 0; _lt_SxS_( i, vlen); i = _add_SxS_( i, 1)) {                      \
    offset = _sel_VxA_( [i], counts);                                          \
    A = rotate( i, offset, A);                                                 \
  }                                                                            \
  return( A);                                                                  \
}

#define ROTATE( a)                                                             \
ROTATE_SxSxA( a)                                                               \
ROTATE_VxA( a)
